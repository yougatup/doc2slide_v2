{"authors": "George B Mo; John J Dudley Per; Ola Kristensson; John J Dudley", "pub_date": "", "title": "Gesture Kniter: A Hand Gesture Design Tool for Head-Mounted Mixed Reality Applications", "abstract": "Hand gestures are a natural and expressive input method enabled by modern mixed reality headsets. However, it remains challenging for developers to create custom gestures for their applications. Conventional strategies to bespoke gesture recognition involve either hand-crafting or data-intensive deep-learning. Neither approach is well suited for rapid prototyping of new interactions. This paper introduces a fexible and efcient alternative approach for constructing hand gestures. We present Gesture Knitter: a design tool for creating custom gesture recognizers with minimal training data. Gesture Knitter allows the specifcation of gesture primitives that can then be combined to create more complex gestures using a visual declarative script. Designers can build custom recognizers by declaring them from scratch or by providing a demonstration that is automatically decoded into its primitive components. Our developer study shows that Gesture Knitter achieves high recognition accuracy despite minimal training data and delivers an expressive and creative design experience.\u2022 Human-centered computing \u2192 Gestural input; Mixed / augmented reality; Virtual reality.", "sections": [{"heading": "INTRODUCTION", "text": "The emerging potential of head-mounted mixed reality devices highlights the need for expressive gesture-based interaction. Hand gestures are one of the primary ways of interaction in this setting, allowing the user to interact with virtual objects and issue commands.\nAlthough hand gestures have been extensively studied in the context of recognition and robustness in interaction [15,31,45,46], there has been little focus on protocols for expressive design with low data overhead. As a result, many designers limit their eforts to creating simple gestures. This inhibits the development of applications where more expressive hand gestures are desirable, for example in game design [21,24] or 3D drawing [7].\nThere have been many tools developed for symbolic gesture design in the context of 2D pen and touch-oriented environments [13,22,23,34]. This paper addresses an analogous problem for a 3D mixed reality environment. Two central principles guide its design.\nFirst, the tool should allow designers to easily implement novel gestures by avoiding the need for a designer to laboriously provide new demonstrations and train new recognizers for each desired gesture. An alternative approach is to synthesize new gestures from previously declared gesture components to build more complex and expressive gestures. This promotes recycling of gesture components and recognizers, aligning with established software engineering principles on reuse and streamlining the design process. Further, instead of having gestures as distinct classes, partitioning a gesture into distinct components, or features, allows more combinations of gesture components to be created, yielding more complex and expressive gestures.\nSecond, recognition should consider the distinct attributes of hand gestures. For instance, take the gesture of the hand traveling in circles while in a fst. Recognition based on the entire motion explicitly disregards the main gesture features, such as the fst and the repetitive circular motion. As a result, variations such as the number of loops and the speed may confuse the classifer. A better approach is to incorporate the attributes of the gesture directly by defning them directly in terms of simpler gesture components. This allows the recognizer to classify based on attributes, not simply through similarity with previously collected samples.\nThis paper presents Gesture Knitter: a new tool for designers addressing these two limitations and enabling the design of novel hand gestures in a mixed reality setting with high data efciency. Gesture Knitter was conceived to facilitate the process of synthesizing and encoding novel gestures while adhering to software engineering principles of reuse and iterative design. The primary focus of Gesture Knitter is in supporting rapid integration of gesture recognition functionality into mixed reality applications. Other aspects, such as the gesture elicitation process and underlying recognition technique, are secondary concerns given this objective and not directly addressed at this stage. In this paper, the tool is demonstrated using the Microsoft HoloLens 2 optical see-through head-mounted display, however, the approach is device agnostic provided that full joint hand tracking is available. Following the lead of 2D penbased gesture design tools, such as Gesture Script [22], we allow designers to declare new hand gesture classes by declaring scripts and providing demonstrations. However, we also introduce novel capabilities into our application that streamline the design process. Signifcantly, gesture components are partitioned between gross and fne components. Gross hand components (or primitives) are gestures characterized by the palm's motion, such as moving the hand forwards and backwards. Fine hand primitives are gestures characterized by the motion of the fngers relative to the palm, such as pointing and pinching. Gesture Knitter also provides a visual declarative script interface that allows designers to design expressive complex hand gestures as sequences of user-defned primitives. The script produces new gesture recognizers without requiring explicit samples of the new gesture. Furthermore, the script declaration of a new complex gesture can be inferred from a single user demonstration. Gesture Knitter automatically generates synthetic gesture samples from previous demonstrations, allowing designers to quickly add greater variation to their training examples. Moreover, we provide a tool to provide feedback to the designer on how distinct a newly declared gesture is compared to gestures that have been previously declared.\nThe key contributions of this work are:\n\u2022 Gesture Knitter: a design tool for rapid prototyping both one and two-hand gestures for mixed reality applications. \u2022 A user-in-the-loop strategy for efciently generating supplementary synthetic sample data to improve recognition performance. \u2022 A diagnostic tool for promoting the discernability of gestures. \u2022 A user evaluation of Gesture Knitter yielding an improved understanding of the behaviors and needs related to rapid prototyping of hand gestures for mixed reality.\nThe remainder of the paper is organized as follows. Section 2 reviews the related work informing the design of Gesture Knitter. The high-level design framework of Gesture Knitter is then presented in Section 3. The lower-level implementation details enabling efcient training and recognition of gestures are described in Section 4. Finally, we evaluate our tool with a designer study and evaluate the performance of Gesture Knitter with empirical data in Section 5. We conclude with limitations and future work and fnal observations on the outcomes of this work.", "n_publication_ref": 12, "n_figure_ref": 0}, {"heading": "RELATED WORK", "text": "There has been much previous work into hand gesture recognition models with diferent learning based approaches. Visual based approaches include orientation histograms [12], metric based learning [20,33], neural networks [26], and decision trees [9], while timeseries data approaches include Hidden Markov Models [19,25,45]. With regards to deconstructing a gesture into separate components, Narayana et al. [28] decomposes the fne and gross hand movement channels to improve gesture recognition with neural networks. An area that applies these hand gesture recognition techniques to a semantically meaningful domain is sign language recognition, which has received extensive attention [29,38,39,46]. In addition, online recognition of hand gestures have been extensively explored with neural network based approaches [47] and modifcations to Hidden Markov Models [8,14]. Semantic approaches to general hand gesture recognition and design include stochastic context free grammars [5] and the use of motion primitives for human-robot interaction [36]. Although our approach learns its hand gesture recognizer from samples using Hidden Markov Models, we enhance learning and expressiveness by decomposing primitives into fne and gross components in a grammar-based visual declarative script.\nPrevious approaches that apply scripts to design and declare gestures are primarily in a 2D sketch or touchscreen environment. For the selection of hand gesture vocabulary, previous approaches have been focused on investigating the universality and intuition of hand gestures [40,42] and attempts have been made to optimize the vocabulary by performing multiobjective optimization over psychophysiological and technical performance measures [37,41]. Nacenta et al. [27] explored creating hand gesture sets by evaluating memorability for pre-designed and user-defned gestures. Although there has been some general guidance in the selection of AR/VR hand gestures [30] and attempts to directly translate hand gestures to script language for computer-aided design [15], no prior work has created a comprehensive system to simultaneously aid design and provide recognizers in the creation of novel hand gestures in a head-mounted mixed reality setting.\nOur work addresses this gap as Gesture Knitter interactively allows the designer to declare new gestures with a visual script, interactively train the recognizer, and generate new synthetic samples for 3D hand gestures. Declarative scripts have been employed in methods such as LADDER [13] and predefned primitives from perceptual components have been used in sketch recognition systems [34]. While our method does use declarative scripts to defne new complex hand gestures, the primitives are partitioned between gross and fne components in order to give the designer more fexibility in design. Example-based script approaches have been used for 2D touch-screen multi-touch gestures in Gesture Coder [23], and rendering scripts to aid the recognition of 2D sketches were explored in Gesture Script [22]. Our method attempts to encapsulate the learning of a user-defned complex gesture by Viterbi decoding to generate a visual declarative script from which the user can give direct feedback to recognize the newly declared gestures.", "n_publication_ref": 29, "n_figure_ref": 0}, {"heading": "GESTURE KNITTER'S DESIGN FRAMEWORK", "text": "In this section, we outline the key components of Gesture Knitter. These are: 1) a component allowing the declaration of new fne and gross primitives; 2) a component providing the option to generate synthetic primitive trajectories and to test gesture discernment; and 3) a component providing complex gesture declaration and recognizer synthesis using the visual declarative script. The design pipeline for declaring new primitives and new complex gestures is shown in Figure 1.\nTo illustrate the practical usage of Gesture Knitter we follow a hypothetical user, Alice, as she designs three expressive gestures for her gaming application, Adventures in Wonderland. The three gestures that she wants to design are Shrink, MadRiddles and Grow. In Shrink, the hand travels down while the palm is facing to the side. In MadRiddles, the hand frst travels forward with the index fnger extended, then the hand moves to the right with the palm facing downwards, and fnally the hand retracts back to the body with a thumbs up. In Grow, the hand frst moves in counterclockwise circles while holding a clenched fst for two to three loops, and then the hand is moved forward with the palm facing downwards. These three gestures are visualized in Table 1.", "n_publication_ref": 0, "n_figure_ref": 1}, {"heading": "Declaring Primitives", "text": "Alice sees that the predeclared primitives in the library do not sufciently express the complex gestures that she had in mind.\nTo rectify this, Gesture Knitter supports interactive training of a recognizer from user demonstrations. Alice frst records a few examples of the hand trajectories corresponding to the new fne or gross primitive hand gesture defned. We refer to gross hand gestures as the gestures characterized only by the trajectory of the center of mass of the hand as it moves through space. We refer to fne hand gestures as the gestures characterized by the trajectory of the fngers relative to the center of mass of the hand. As with previous 2D gesture design toolkits such as Gesture Script [22], our system preserves the interaction of quickly training a recognizer from demonstrations.\nTo build the Shrink gesture, Alice must declare the gross primitive of down and fne primitive of palm-side. For Grow, the gross primitives would be circle and forward, while the fne primitives would be fst and palm-front. For MadRiddles, the gross primitives are forward, right, backward; the fne primitives are point, palm-down, and thumbs. Note that once one primitive is declared, declaring another complex gesture does not need re-declaration of the primitive: that same primitive can just be used directly.", "n_publication_ref": 1, "n_figure_ref": 0}, {"heading": "Data Synthesis", "text": "Gesture Knitter also provides an auxiliary tool to generate new synthetic samples by adding variation to given hand demonstrations. After asking the system to generate new synthetic samples,  Separate sample generators are created and trained for fne and gross primitive gesture sets.", "n_publication_ref": 0, "n_figure_ref": 0}, {"heading": "Discernability of Gestures", "text": "A fundamental problem for the designer is creating gesture primitives and complex gestures that are easily distinguished by a recognizer. To aid in this task, Alice can test a newly declared gesture with the discernability tool that detects the similarity of this gesture in relation to previously declared gestures of the same category. For instance, if Alice declares the fne primitive of fst, she can use this tool to compare this new gesture's demonstrations to previously declared fne primitives. If there is a high degree of similarity between this new gesture and previously declared gestures, the tool notifes the designer of the possibility of discernment issues between them. For instance, comparing her demonstrations of fst with previously declared fne primitives show that multiple instances of her demonstrations are possibly confused with thumbs, as shown in Figure 3. When faced with this issue, Alice can choose to either alter the design of the novel gesture or provide additional samples to the two similar gestures to improve their discernability during recognition.", "n_publication_ref": 0, "n_figure_ref": 1}, {"heading": "Declaring Gestures with Visual Scripts", "text": "Gesture Knitter supports the declaration of complex gestures with a visual scripting interface by concatenating primitive gross and fne hand gestures as shown in Figure 4. We assume for now that Alice is happy with the library of fne and gross primitive hand gestures that are already declared. Alice starts by selecting New Start Node by declaring the start node of the gesture. A complex gesture is composed of a sequence of nodes, and each node has felds denoting the gross component and the fne component. She can declare a node with the felds by clicking on New Hand Node, and she can edit that node by selecting the option Edit Node Properties or delete it by selecting Delete Node. There are looping options for each node, as seen in the declaration for Grow in Table 1, which can be assigned by clicking Add Loop. Alice can connect two nodes together by selecting both nodes and then choosing Add Connection. The chronological ordering of the nodes follows sequentially from the node arrangement with respect to the start node. Alice ends the gesture by declaring the end node by clicking on New End Node. During the declaration, Alice can click the Validate button to check if the script obeys the syntax. After the declarative script is built, Alice clicks the Compile button and an automatic recognizer is built for the new complex gesture composed of the trained recognizers for the primitive hand gestures. Alice can now use these compiled recognizers in her desired application.", "n_publication_ref": 0, "n_figure_ref": 1}, {"heading": "Automatically Generating Declarative Scripts", "text": "Gesture Knitter supports the generation of a declarative script directly from a complex gesture demonstration. For instance in Grow, Alice records a demonstration on her mixed reality headset. After importing the demonstration into Gesture Knitter, she presses the Decode button in the toolbar and the system decodes the primitive components of the hand gesture by outputting an inferred visual declarative script of the new complex gesture. The system essentially infers the new gesture's syntactic representation using its priors for the primitive gestures. If there are errors with the script generated, another hand demonstration can be provided, or the visual script can be edited directly to correct the errors. The edited script is then verifed and compiled into a recognizer as in the previous section.\nFor the specifc case of designing two-handed complex gestures, the same process is followed but now the trajectories are recorded with both hands, and each of the primitive component nodes in the visual declarative script consists of fve felds: the fne and gross primitive components of each of the left and right hands and the number of loops, as shown in the Figure 5. The primitives that the designer can declare now not only consist of primitives specifcally  for the right hand, but also gross and fne primitives particular to the left hand.", "n_publication_ref": 0, "n_figure_ref": 1}, {"heading": "EFFICIENTLY TRAINING AND RECOGNIZING GESTURES", "text": "We now present the algorithms that Gesture Knitter uses in order to learn recognizers, decode demonstrations, and generate synthetic samples to improve recognition rates.", "n_publication_ref": 0, "n_figure_ref": 0}, {"heading": "Data Preprocessing", "text": "Hand gestures are represented as time-series trajectories {x i } n i=1 recorded by the hand tracker on the HoloLens 2. For one-handed gestures, we take each x i to be 18 dimensional, where the frst three entries represent the x, y, z components of the palm, and the remaining 15 represent the x, y, z of the thumb, index, middle, ring, and pinky fngers. For two-handed gestures, we take each x i to be 36 dimensional, each of the two 18 dimensional halves corresponding to the right and left hands. For the design protocol, we set n=300, corresponding to a fve second recording for the primitives and complex gestures. We frst transform the trajectory to a body-centered frame at the sternum to establish a stationary frame of reference.\nFor the gross component of the recorded gesture, we only take into account the time-series given by the palm coordinates. We frst smooth the palm coordinates using a Gaussian flter and we take the frst diferences of the smoothed coordinates to yield the velocity of the trajectory. As the defning characteristic of the gross gesture is the shape of the trajectory, we resample the trajectory points so they are evenly spaced on the curve, where the number of points is proportional to the curve length (see Figure 6). For the fne component, we take the position of the fngers relative to the palm for the whole trajectory.", "n_publication_ref": 0, "n_figure_ref": 1}, {"heading": "Learning Gesture Recognizers", "text": "A Hidden Markov Model (HMM) is a probabilistic model that represents probability distributions over sequences of observations, and is especially useful for time-series data. It assumes that the observations, which in our case are the hand trajectories, are dependent on a hidden process, which is assumed to be Markov. Specifcally, we leverage a Multivariable Gaussian HMM as this model allows joining recognizers that infer time-series data composed of known sub-components. Our choice is motivated by the fundamental goal of Gesture Knitter, which is to synthesize novel hand gestures by arranging primitives by concatenation or adding loops. Many other parametric probabilistic methods have been applied to related problems [2,3,10,11,18,44] but are not well suited to our task.\nThe structure for the HMMs we use for primitive gestures is a Multivariable Gaussian HMM with loop transitions for each of the hidden states. We found that 12 hidden states works best for gross primitives and eight hidden states works best for fne primitives. The fne primitive HMM is shown in Figure 7(a). We train the HMMs given the samples for the primitive trajectories using the Baum-Welch algorithm, where estimates of the transition probabilities are iteratively improved during learning. The HMMs are trained for the gross and fne primitives only using the samples from demonstrations or synthetically generated samples (covered later in Section 4.5).", "n_publication_ref": 6, "n_figure_ref": 1}, {"heading": "Recognizer Synthesis and Classifcation", "text": "We focus on the recognizer synthesis and classifcation process for one-hand complex gestures. When the declarative script for the complex gesture is compiled, we obtain a list of aligned sequential components for the gross primitives, fne primitives, and loops that correspond to the complete gesture nodes. For each one-hand complex gesture, we build two HMMs corresponding to the gross component, a concatenation of gross primitives, and the fne component, a concatenation of the fne primitives, separately. Here we describe the process for the fne component as the gross component is constructed in the same way. For each fne gesture primitive, we retrieve the pre-trained HMM corresponding to that primitive. For one fne primitive component that sequentially follows another fne primitive component, we concatenate the two corresponding pre-trained HMMs by adding a transition between the end state of the frst fne primitive's HMM to the start state of the second fne primitive's HMM as shown in Figure 7(b). If the corresponding loop value to that fne primitive is greater than one, we add a transition between the end state of that particular primitive's HMM to its start state. For two-handed complex gestures, we have four HMMs corresponding to the right-gross, right-fne, left-gross, and left-fne components. Now, given the diferent complex hand gesture classes {c i } m i=1 and their corresponding HMM recognizers, the gross and fne components, we can perform classifcation. For a given demonstration D, we run the forward algorithm on each of the complex gesture HMMs corresponding to each of the complex gesture classes in order to fnd log p(D|c i ) for i = 1, ..., m. Essentially, the forward algorithm for each complex hand gesture class c i , is applied to D on the gross and fne HMMs of the complex gestures to yield log p \u0434,c i and log p f ,c i corresponding to the log probabilities for the class's gross and fne components respectively. Then we have that log p(D|c i ) = log p \u0434,c i + w log p f ,c i for the mixture model. w is an empirically determined parameter. We found that w = 0.1 works the best in our experiments. Therefore, we classify the gesture into the class C where C = argmax c i log p(D|c i ), that is, the complex gesture class with the highest log probability of generating the data sequence. For two-hand gestures, the recognizer would have the log probability of the demonstration given the class as a sum of four terms: the log probabilities of the gross and fne components for both the right and left hands. We use the same weighting for the mixture model between gross and fne components for two-handed gestures.", "n_publication_ref": 0, "n_figure_ref": 1}, {"heading": "Decoding Demonstrations", "text": "The main algorithm that we use to translate a demonstration D to a declarative script is the Viterbi algorithm, which computes the most likely sequence of hidden states given the demonstration. Again, we focus on one-hand gestures as two-hand gestures can be easily extended by applying the same method for the other hand. First, we describe the decoding HMMs corresponding to the gross and fne components on which we run the Viterbi algorithm.\nConsider the fne component of the decoding HMM, and call its start and end states s and e respectively. For every fne primitive, we connect its corresponding primitive HMM to the fne decoding HMM by connecting s to the starting state of the fne primitive HMM and the end state of that fne primitive HMM to e, and subsequently normalizing the transition probabilities. Then, to simulate the sequence of diferent fne gestures, we add a transition from e to s, essentially looping the decoding HMM. The whole decoding HMM is shown in Figure 7(c). Hence, after running Viterbi with D, we obtain a sequence of hidden states that correspond to the sequence of fne primitive gestures. We build a similar decoding HMM for gross primitives. For two-hand gestures, we construct the two decoding HMMs for each of the left and right hands. Given the hidden states, we normalize the series with the smallest length of the number of states traversed for one particular gesture primitive, and subsequently align the fne and gross primitive states for the script nodes.", "n_publication_ref": 0, "n_figure_ref": 1}, {"heading": "Preference Gaussian Processes and Sample Generation", "text": "We apply Bayesian optimization to our preference gallery tool to generate synthetic samples from which the user can select. Bayesian optimization is a frequently employed algorithm in interactive machine learning for environments such as procedural animation design [1], visual design optimization [17], and panel placement in a crowd-sourced AR setting [6]. Most of these methods optimize over a set of design parameters in order to generate new samples to enhance a concrete design goal, such as visibility and material appearance. Moreover, previous works have primarily used interactive machine learning in an AR/VR setting to recognize hand gestures for an online supervised classifcation task [16,32]. Attempts have been made to create a generative model for hand gestures, such as using generative adversarial networks, but that approach requires large amounts of data [43]. Using template models to infer variation parameters of the gestures [4] is another approach. However, such methods can only be efectively applied to lower dimensional data. Specifcally, the fne gestures are 15 dimensional for one hand, and due to the curse of dimensionality, this makes distance metric approaches for comparing gestures inefective. Instead, we use Bayesian optimization to optimize the variation we can apply to previously collected demonstrations to increase the recognition accuracy of the classifer. Our novel approach allows designers to automatically generate new samples without the repetitive labor of providing explicit demonstrations.\nIn our particular scenario, the objective function value is hidden because when training, we are only given data about the relative preference of one generated sample to another sample in representing the original sample of the primitive gesture. To solve this, we follow the framework as outlined in Brochu et al. [1], which we refer the reader to for more details on the approach. The essential idea is that from the preference gallery user choice, we use Gaussian process (GP) regression to model the latent valuation function given the parameters used to generate the synthetic demonstrations and their preference rankings. From the GPs, we use the Bayesian optimization approach to decide where to sample next while trading of exploitation and exploration with the expected improvement acquisition function.\nWe implement two Bayesian optimizers to generate synthetic samples for the fne primitives and gross primitives separately. For the fne primitives, the parameters are the noise variances {\u03c3 i } 3 i=1 from which we sample {\u03b8 i } 3\n=1 , the roll, yaw, and pitch deviation, i from the normal distribution \u03b8 i \u223c N (0, \u03c3 i 2 ). From {\u03b8 i } 3 =1 , we coni struct the rotation matrix with which we multiply the coordinates of each of the fngers relative to the palm position. For the gross primitives, the parameters are the noise variances {\u03c9 i } 3 =1 from i which we sample the dilation factors {\u03bb i } 3 =1 for the x, y, z direci tions from the normal distribution \u03bb i \u223c N (1.0, \u03c9 i 2 ). From {\u03bb i } 3 i=1 , we construct the 3\u00d73 diagonal matrix with which we dilate the palm positions along the entire trajectory relative to the starting position of the palm. Note that for the same parameter set \u03b8 i or \u03bb i , we get a diferent synthetic trajectory each time we are sampling from the normal distribution set by these parameters. This approach serves to introduce variation in terms of the shape, scale, and speed of the gross primitives and variability in the orientation of the fne primitive motions. We add 30 training samples to the two Bayesian optimizers before we use the preference galleries to generate synthetic data.\nIn our approach, we add a heuristic to randomize our decision each iteration to either choose to sample two new parameter sets to obtain a new sample or to pick two of the previously sampled parameters to generate trajectories from. This is to query the user about the ranks between two previous parameter sets that have not yet been directly compared for a better estimate of the latent valuation function.", "n_publication_ref": 8, "n_figure_ref": 0}, {"heading": "Discernment of Gestures", "text": "We run the demonstrations of the newly declared gesture on all the other previously declared gestures' HMMs in the same type of general class, that is, gross primitives, fne primitives, one-handed complex gestures. These will provide a log probability for each HMM that demonstrates the likelihood that any of the other classes is likely to be similar to the new gesture. If any of these log probabilities is above an empirically determined threshold then we give a warning to the designer that, given these demonstrations, there is a possibility that the new gesture is similar to a gesture that is already declared.", "n_publication_ref": 0, "n_figure_ref": 0}, {"heading": "Online Recognition", "text": "Gesture Knitter supports online recognition applications where the system is required to detect gesture activity within a stream of possible non-gesture data. In order to recognize multiple gestures sequentially, we construct a movement HMM representing the gesture class trained from the gross motion of the discrete complex gesture samples we have obtained. Note that we detect movement only through the palm trajectory or the gross motion. Hence, for a continuous stream of frames, we frst apply the preprocessing step of detecting if a gesture lies within a window of 150 frames, stepping by 30 frames each iteration. For the window, we run the trajectory on the movement HMM, and if the probability of movement is greater than a log probability threshold, we run the window data on the recognizer, indicating what is the most likely gesture to be in this window. We accept the classifcation if the log probability of the class selected is greater than -30,000.0 for one-handed complex gestures and -5,000.0 for two-handed complex gestures. For both types of complex gestures, we set the movement threshold to -50.0. All of the above parameters were selected based on those yielding the best performance given collected user data. We accumulate all the recognition results for the most recent set of windows where we expect there to be a gesture and make a decision based on a majority vote.", "n_publication_ref": 0, "n_figure_ref": 0}, {"heading": "Implementation Details", "text": "The visual declarative script is implemented using Java. The HMM recognition system is implemented using Pomegranate [35] in Python3, and the Bayesian optimization and hand animations are implemented with Numpy and Matplotlib in Python3 respectively. The hand tracking component is implemented in C# and Unity using the Microsoft HoloLens 2 headset.", "n_publication_ref": 1, "n_figure_ref": 0}, {"heading": "EXPERIMENTAL EVALUATION", "text": "We evaluate Gesture Knitter in two separate experiments to gain insight into the design process and the recognition capabilities of the system. The purpose of the frst study, conducted with eight individuals (all right handed, three female), was to collect representative gesture data to evaluate recognition and decoder performance. In Study 1, performance is evaluated with reference to several tasks: 1) recognition rate of the complex gestures; 2) decoding performance when declaring complex gestures; 3) the aid of synthetic samples in increasing recognition rate; and 4) the potential of recognition performance in an online recognition setting. The purpose of the second study, conducted with fve of the same participants from Study 1 (one female), was to observe the participants' behaviors and use of Gesture Knitter during a design task of a custom complex gesture with a newly declared primitive. The frst study took two hours and the design study took one hour including breaks, and all eight were compensated \u00a340 for their time.", "n_publication_ref": 0, "n_figure_ref": 0}, {"heading": "Study 1: Data Collection", "text": "The data collection for evaluating Gesture Knitter involved collecting repeated gesture samples for a defned set of gross, fne and complex combined gestures. For gross primitives, we collected fve samples from each participant for each of the eight gross primitive classes shown in Figure 8(a) for the right hand. We logged two more gross primitive classes for the left hand corresponding to circles and waves, fve samples per gesture from each participant. Note that we used the data from other six right hand gross primitives for the left hand as well. For fne primitives, we collected fve samples from each participant for each of the eight fne primitive classes shown in Figure 8(b) for both the right and left hands due to motor diferences between the dominant and non-dominant hands. Five further samples from each participant were collected for each of the ten complex one-handed gestures in Table 2 and for each of the ten complex two-handed gestures in Table 3. When executing all gestures, participants were required to start from a nominal rest position: the hand with the palm facing down. The gross and fne primitives were selected by following the gestures suggested by Piumsomboon et al. [30]. The complex gestures were selected to showcase a variety of distinct complex gestures that can be synthesized using Gesture Knitter's visual declarative script.\nTo demonstrate the potential of applying Gesture Knitter to online recognition, we also collected fve samples of three complex gestures performed in sequence within a 20 second reel. Each individual was asked to perform one of each of the fve sequences of three gestures: (1) Shrink, Execution, PeaceOut; (2) TickTock, MadRiddles, Flamingo; (3) Grow, Caterpillar, CheshireDance; (4) Push, CheshireDance, PeaceOut; (5) Execution, Shrink, Flamingo (see Table 2 for gesture syntax). We did this for both one-handed complex gestures and two-handed complex gestures. Participants were requested to keep their hands relatively still between two complex gestures for fve seconds during the continuous reel.  ", "n_publication_ref": 1, "n_figure_ref": 2}, {"heading": "Recognition and Decoding Evaluation", "text": "We frst tested the rate of recognition of all the eight participants' one-hand and two-hand complex gestures when trained with all the primitives collected (that is, 8 participants \u00d7 5 repetitions = 40 training examples per primitive gesture). Note that none of the recognizers are trained with any of the complex gesture samples.\nThe recognition accuracy for the ten one-hand and two-hand gestures is shown in Figure 9(a). Gesture Knitter achieves an average accuracy of 96.5% for one-handed complex gestures and 98.3% for two-handed complex gestures. To examine the impact of training data diversity, we also conducted two cross-validation experiments with the full dataset: Train-on-1 involved training on primitive data from one person and testing on the complex gestures from the The number of errors per node for decoding complex gestures. Note that one-handed complex gestures have three felds per node, while two-handed have fve felds per node.\nTable 2: The ten one-handed complex gestures collected. Gesture nodes are listed in sequential order with each being denoted as gross-primitive / fne-primitive / (repeats), where repeats are blank if 1.  9(b). For the Train-on-1 condition, the recognition rate is 54.7% and 55.0% for one-handed and two-handed complex gestures respectively. The cross-validation accuracy for Train-on-7 is 97.5% for one-handed and 99.2% for two-handed complex gestures, illustrating that increased variation in the primitive data introduced by more individuals creates increased robustness in recognition of new users' gestures. In addition, the average time for classifying one-handed gestures was 470.2 ms and for two-handed gestures was 1095.6 ms on a Dell Latitude E5440 PC with an Intel Core i5.\nWe then assessed the efcacy of generating synthetic samples from our preference gallery-based Bayesian optimization. Note that synthetic samples were generated by the frst author using the preference gallery. We frst selected fve examples for each gross and fne primitive from a randomly selected participant as training data, and then we synthetically generate ten new samples for each primitive from these fve samples using our preference gallery. Figure 9(c) compares the recognition rate on one-handed and twohanded complex gestures from all participants when trained with fve real samples to fve real plus 10 synthetic samples for each fne and gross primitive. For both types of complex gestures, we observe a signifcant increase in recognition rate to a comparable rate to training with all the primitive samples when trained with the 10 synthetic samples, specifcally from 73.0% to 96.0% for one-handed complex gestures and from 70.0% to 97.8% for two-handed complex gestures. This suggests that the generated synthetic gestures introduce sufcient variability into the primitives that translates to substantial improvements in recognition accuracy for diferent users while simultaneously alleviating data overhead.\nTo gauge the potential of these recognizers for applications in a more challenging online recognition use-case, we evaluated online recognition performance using the 20 second trace in which participants sequentially performed three complex gestures. This dataset consists of a total of 120 one-handed and 120 two-handed complex gestures performed sequentially by the eight participants. The results are shown in Figure 9(d). The recognition rate is calculated as follows: an incorrectly recognized gesture, or no output when there is a gesture, results in an error; if a gesture is recognized when there was none we introduce an error and add one to the total number of gestures. The recognition rate for one-handed was 72.5% and for two-handed was 45.2%. The lower accuracy, notably for two hands, is due to frstly the high frequency of false activations where a hand gesture class was detected when there was none, and secondly from when there were no gestures detected when there indeed was one. These points suggest that better online gesture recognition delimitation techniques are likely to further improve the recognition rate, but this is beyond the scope of the current paper. In many prototyping development exercises, we anticipate that there will in fact be some form of explicit gesture start delimitation in which case the efective recognition accuracy is as per Figure 9(a) (i.e., in excess of 95%).\nFinally, we assess our decoding mechanism as an aid for designers from our entire collection of one-handed and two-handed complex gestures. We assess the efcacy of decoding by using a variant of the distance. We defne the edit distance between two scripts as the number of edits on the nodes' felds for them to be the same. Note that for one-handed complex gestures, the number of felds per node is three (fne, gross, and number of loops) and for two-handed complex gestures, the number of felds per node is fve (right-fne, right-gross, left-fne, left-gross, and number of loops). We then divide the total edit distance by the number of nodes of that particular complex gestures' script declaration to obtain the decoding error rate per node. Intuitively, this value corresponds to the expected number of felds requiring a change for each node to form the right declaration after giving a demonstration. For onehanded gestures, the average error rate was 0.73 edits per node while for two-handed gestures, the average error rate was 1.97 edits per node as shown in Figure 9(e). Gestures such as TickTock may generate large errors when the gross primitives decoded are repetitions of right and left, which can be thought of as an alternative formulation of the gesture. Despite the decoder sometimes omitting or adding extraneous nodes, this performance demonstrates that the decoding mechanism is a helpful tool for designers to edit the visual declarative script generated from providing a demonstration instead of starting from scratch.", "n_publication_ref": 0, "n_figure_ref": 6}, {"heading": "Study 2: Design Study", "text": "We conducted a design study with fve designers recruited from within our institution (four male and one female, average age 21.6 years) to analyze the usability of Gesture Knitter's features and design protocol. All fve participants had previously taken part in Study 1. This was to ensure participants were already familiar with the HoloLens 2 hand tracking functionality. Three participants had prior experience using machine learning, one had programmed gesture recognition before, and one had experience with AR/VR applications.\nWe asked each participant to declare one new fne or gross primitive diferent from the sixteen evaluated in Study 1 and to use that new primitive to design a custom one-handed complex gesture. They were free to use any of the predeclared fne and gross primitives. Prior to the design task, participants were introduced to the idea of decomposing a hand gesture into gross and fne components and synthesizing complex gestures. Participants were familiar with the distinction between fne, gross, and complex gestures, having already been exposed to this concept in Study 1. Study 2 was scheduled to ensure that there was no more than a one day break after Study 1. Participants were asked to prepare and notify the study organizers of their new primitive and complex gesture concept prior to attending the study in order to avoid the same new primitive being chosen by multiple individuals. This happened when two individuals wanted to declare the same fne primitive Spiderman.\nWe frst provided the participants with a tutorial on Gesture Knitter and walked them through the process of using the visual declarative script to declare the Shrink and Flamingo gestures from scratch and by demonstration. Specifcally, we stated to them that they must input their novel primitive gesture frst by providing 10 demonstrations and then declaring their novel complex gesture. Next, participants completed a task to declare a declarative script for Grow and Push.\nWe then asked participants to start declaring their novel primitive and designing their novel complex gesture. During the design process, we followed a think-aloud protocol in which participants were asked to verbalize their reasoning and decision making at each step of implementing the novel complex gesture. Participants were instructed to provide ten demonstrations of the novel primitive gesture as part of the design process, as well as ten demonstrations of their novel complex gesture. If they decided to declare their gesture from scratch, we asked them to try out the decoding mechanism afterwards. After the design process, participants completed a post-study questionnaire. The study was conducted on a laptop with an external mouse and all hand gestures were recorded using the HoloLens 2.", "n_publication_ref": 0, "n_figure_ref": 0}, {"heading": "Results.", "text": "All fve participants completed the design study by declaring either a gross or fne primitive and using that to construct a novel onehanded complex gesture. Four novel fne primitives and one novel gross primitive were declared, as shown in Figure 10. The fve novel complex gestures are presented in Figure 4. During the initial synthesis of the complex gesture, four participants opted to declare the script from scratch and one participant decided to provide a demonstration (for the Dispose gesture).  Gesture Knitter is easy to understand.\nGesture Knitter is easy to use.\nThe script is easy to understand.\nThe scripts are easy to declare.\nI was able to construct the gesture I had in my mind.\nThe decoder is useful.\nGestures can be easily represented by the script.\nDeclaring new primitives increases the expressiveness of possible gestures. Here, SA is strongly agree, A is agree, N is neutral, D is disagree, and SD is strongly disagree.\nThe post-design questionnaire captured participants' responses to the statements summarized in Figure 11 on a fve point Likert scale. Notably, all participants agreed that Gesture Knitter was useful, easy to understand, and expressive.\nThe following observations are taken from the think-aloud component of the study. When designers opted to declare the script from scratch, they inserted the gesture nodes in chronological order. This suggests that the visual declarative script corresponds directly to the performance of the complex gesture. Typically, they frst declare all the gesture nodes, including the start and end nodes, and then connect the nodes together with the edges. During the declaration, the designers would also perform the complex gesture to guide themselves through the design process. This behavior implies that the physical declaration of the visual declarative script from scratch intuitively maps to performing the complex gesture.\nIn addition, when performing the decoding by demonstration, the designer would still need to traverse from start to end to verify the decoding and make any of possibly a few modifcations accordingly. This observed workfow is likely to have been infuenced by the nature of the task and the introductory instructions given. We conjecture that increased exposure and trust in the system would lead to participants leveraging the declaration by demonstration functionality more extensively given its efciency. It is also plausible that the decoding by demonstration functionality may be useful to users with no prior exposure to the system, as it may provide a helpful introduction on how to construct and edit nodes to represent gestures a novice designer would have in mind. The visual declarative script therefore appears to directly and intuitively correspond to a syntactic representation that represents the physical performance of the gesture. The fact that most participants had no prior experience in programming gesture recognition, and were nevertheless able to build a custom gesture recognizer, demonstrates that Gesture Knitter is easy to use. The recognition rates for the novel complex gestures vary between diferent classes. For Alright, Shotgun, and Cauldron, all of the 10 designer provided samples for each class were correctly classifed. By contrast, Dispose had a recognition rate of 10% and none of the designer samples of Spiderweb were correctly classifed. Dispose was most frequently confused with Caterpillar while Spiderweb was confused with Push.\nThe discernability tool identifes these potential misclassifcations, highlighting its merit as a design aid to create distinct gestures.\nFinally participants were given an opportunity to provide comments on the features of Gesture Knitter. When asked about what they liked best about the system, two users mentioned Gesture Knitter's decoding mechanism. One commented that \"decoding is signifcantly less mentally strenuous than connecting blocks together.\"\nThe three other designers all mentioned the simple and straightforward design interface. One stated that the \"visual declarative script is user-friendly and one can see how complex movements can be broken down node by node.\" These comments suggest that Gesture Knitter is easy to learn and supports rapid development of novel complex hand gestures.\nIn terms of possible features that the designers wanted to see implemented in the future, there were suggestions on improving the script to make the script even more powerful. One wanted the system to \"learn to recognize the borders between successive gestures\", hinting that the transitions between gesture components can also be user-defned. Another wanted the incorporation of the speed of the gesture as a semantic feature in determining the gesture class. This aligns well with our vision for future work.", "n_publication_ref": 0, "n_figure_ref": 3}, {"heading": "DISCUSSION AND FUTURE WORK", "text": "Although Gesture Knitter allows users to expressively create hand gestures with low data overhead, several enhancements can be added to improve the system's capabilities. The hand gestures performed in this paper have a specifc way in which they are performed, such as the circle primitive being counterclockwise for the right hand. Although HMMs are able to recognize diferent demonstrations of the same class given sufcient sample variation and number, the visual declarative script would need to support multiple ways of performing a gesture. One possible route for future work would be allowing the designer to provide multiple script candidates for a particular complex gesture.\nWe have illustrated the feasibility of Gesture Knitter as a tool that can be used to create novel gestures for head-mounted mixed reality applications. Crucially, it demands very little data to be collected by the designer. While this paper has explored one particular online continuous recognition setting, further investigations can be conducted to improve online recognition as well as recognition depending on user context. More delimitation and windowing techniques can be explored with respect to Gesture Knitter to further optimize the system for online recognition. Another fruitful avenue of future work is to explore user interaction with these declared gestures for various applications in mixed reality. For example, one compelling direction be to probe user experiences when using Gesture Knitter for a gaming application.\nWith regards to synthetic data generation, this process could be conceivably extended to generate a sufciently large sample of gestures to train a deep neural network architecture, such as a recurrent neural network or a generative adversarial network. However, this averts the primary goal of having low data overhead. One natural direction to explore would be to fnd other low dimensional generative processes to generate efective synthetic hand gesture samples.", "n_publication_ref": 0, "n_figure_ref": 0}, {"heading": "CONCLUSIONS", "text": "We have introduced Gesture Knitter, a tool for creating hand gestures for head-mounted mixed reality applications. It augments the ability for designers to create new gestures from primitives through visual declarative scripts with low data overhead, while allowing for creativity and expressiveness during the design process. Gesture Knitter features additional tools, such as decoding, synthetic sample generation, and discernment which serve as useful aids to the designer. In addition, Gesture Knitter supports both one-handed and two-handed gestures. Moreover, we have demonstrated the recognition capabilities of Gesture Knitter by assessing gesture variability across diferent users and diferent levels of data sparsity, and the prospect of deploying the generated recognizers to online recognition settings. In summary, Gesture Knitter is shown to be a compelling tool for designers to rapidly prototype custom gesture recognizers for a wide variety of mixed reality applications.", "n_publication_ref": 0, "n_figure_ref": 0}, {"heading": "ACKNOWLEDGMENTS", "text": "", "n_publication_ref": 0, "n_figure_ref": 0}], "references": [{"title": "A Bayesian Interactive Optimization Approach to Procedural Animation Design", "journal": "The Eurographics Association", "year": "2010", "authors": "Eric Brochu; Tyson Brochu; Nando De Freitas"}, {"title": "A tutorial on task-parameterized movement learning and retrieval", "journal": "Intelligent Service Robotics", "year": "2016-01", "authors": " Sylvain Calinon"}, {"title": "On Learning, Representing, and Generalizing a Task in a Humanoid Robot", "journal": "", "year": "2007-04", "authors": "Florent Sylvain Calinon; Aude Guenter;  Billard"}, {"title": "Adaptive Gesture Recognition with Variation Estimation for Interactive Systems", "journal": "ACM Transactions on Interactive Intelligent Systems", "year": "2014-12", "authors": "Nicola Baptiste Caramiaux; Atau Montecchio; Fr\u00e9d\u00e9ric Tanaka;  Bevilacqua"}, {"title": "Hand Gesture Recognition Using Haar-Like Features and a Stochastic Context-Free Grammar", "journal": "IEEE Transactions on Instrumentation and Measurement", "year": "2008-08", "authors": "Qing Chen; Nicolas D Georganas; Emil M Petriu"}, {"title": "Crowdsourcing Interface Feature Design with Bayesian Optimization", "journal": "Association for Computing Machinery", "year": "2019", "authors": "John J Dudley; Jason T Jacques; Per Ola Kristensson"}, {"title": "Bare-Handed 3D Drawing in Augmented Reality", "journal": "Association for Computing Machinery", "year": "2018", "authors": "John J Dudley; Hendrik Schuf; Per Ola Kristensson"}, {"title": "Hidden Markov model based continuous online gesture recognition", "journal": "", "year": "1998", "authors": "Stefan Eickeler; Andreas Kosmala; Gerhard Rigoll"}, {"title": "A boosted classifer tree for hand shape detection", "journal": "", "year": "2004", "authors": "Eng-Jon Ong; R Bowden"}, {"title": "The Hierarchical Hidden Markov Model: Analysis and Applications", "journal": "Machine Learning", "year": "1998-07", "authors": "Shai Fine; Yoram Singer; Naftali Tishby"}, {"title": "Motion-Sound Mapping through Interaction: An Approach to User-Centered Design of Auditory Feedback Using Machine Learning", "journal": "ACM Transactions on Interactive Intelligent Systems", "year": "2018-06", "authors": "Jules Fran\u00e7oise; Fr\u00e9d\u00e9ric Bevilacqua"}, {"title": "Orientation Histograms for Hand Gesture Recognition", "journal": "", "year": "1994", "authors": "T William; Michal Freeman;  Roth"}, {"title": "LADDER, a sketching language for user interface developers", "journal": "Computers & Graphics", "year": "2005-08", "authors": "Tracy Hammond; Randall Davis"}, {"title": "Online gesture recognition system for mobile interaction", "journal": "", "year": "2003", "authors": "Sanna Kallio; Juha Kela; Jani Mantyjarvi"}, {"title": "Instant 3D design concept generation and visualization by real-time hand gesture recognition", "journal": "Computers in Industry", "year": "2013-09", "authors": "Jinsheng Kang; Kang Zhong; Shengfeng Qin; Hongan Wang; David Wright"}, {"title": "Using Interactive Machine Learning to Support Interface Development Through Workshops with Disabled People", "journal": "ACM Press", "year": "2015", "authors": "Simon Katan; Mick Grierson; Rebecca Fiebrink"}, {"title": "Sequential line search for efcient visual design optimization by crowds", "journal": "ACM Transactions on Graphics", "year": "2017-07", "authors": "Yuki Koyama; Issei Sato; Daisuke Sakamoto; Takeo Igarashi"}, {"title": "Incremental learning of full body motion primitives and their sequencing through human motion observation", "journal": "The International Journal of Robotics Research", "year": "2012-03", "authors": "Dana Kuli\u0107; Christian Ott; Dongheui Lee; Junichi Ishikawa; Yoshihiko Nakamura"}, {"title": "An HMM-based threshold model approach for gesture recognition", "journal": "", "year": "1999-10", "authors": "Hyeon-Kyu Lee; J H Kim"}, {"title": "Hand gesture recognition using Kinect", "journal": "", "year": "2012", "authors": "Yi Li"}, {"title": "Touch-less interactive augmented reality game on vision-based wearable device", "journal": "Personal and Ubiquitous Computing", "year": "2015-07", "authors": "Zhihan Lv; Alaa Halawani; Shengzhong Feng; Haibo Shafq Ur R\u00e9hman;  Li"}, {"title": "Gesture script: recognizing gestures and their structure using rendering scripts and interactively trained parts", "journal": "Association for Computing Machinery", "year": "2014", "authors": "Hao L\u00fc; James A Fogarty; Yang Li"}, {"title": "Gesture coder: a tool for programming multi-touch gestures by demonstration", "journal": "ACM Press", "year": "2012", "authors": "Hao L\u00fc; Yang Li"}, {"title": "Ghost hunters: ambient light and hand gesture utilization in mobile augmented reality games", "journal": "ACM Press", "year": "2016", "authors": "Mounib Mazouzi; Paula Alavesa; Timo Koskela; Timo Ojala"}, {"title": "Hand gesture recognition using hidden Markov models", "journal": "", "year": "1997", "authors": "Ho-Sub Byung-Woo Min; Jung Yoon; Yun-Mo Soh; Toshiaki Yang;  Ejima"}, {"title": "Hand gesture recognition with 3D convolutional neural networks", "journal": "IEEE", "year": "2015", "authors": "Pavlo Molchanov; Shalini Gupta; Kihwan Kim"}, {"title": "Memorability of Pre-Designed and User-Defned Gesture Sets", "journal": "Association for Computing Machinery", "year": "2013", "authors": "Miguel A Nacenta; Yemliha Kamber; Yizhou Qiang; Per Ola Kristensson"}, {"title": "Gesture Recognition: Focus on the Hands", "journal": "", "year": "2018", "authors": "Pradyumna Narayana; J Ross Beveridge; Bruce A Draper"}, {"title": "Sign Language Recognition Using Convolutional Neural Networks", "journal": "Springer International Publishing", "year": "2015", "authors": "Lionel Pigou; Sander Dieleman; Pieter-Jan Kindermans; Benjamin Schrauwen"}, {"title": "User-defned gestures for augmented reality. CHI '13 Extended Abstracts on", "journal": "Human Factors in Computing Systems", "year": "2013", "authors": "Thammathip Piumsomboon; Adrian Clark; Mark Billinghurst"}, {"title": "Interactive hand gesture-based assembly for augmented reality applications", "journal": "", "year": "2012", "authors": "Rafael Radkowski; Christian Stritzke"}, {"title": "Static and Dynamic Hand-Gesture Recognition for Augmented Reality Applications. In Human-Computer Interaction. HCI Intelligent Multimodal Interaction Environments", "journal": "Springer", "year": "2007", "authors": "Stefan Reifnger; Frank Wallhof; Markus Ablassmeier; Tony Poitschke; Gerhard Rigoll ; David Hutchison; Takeo Kanade; Josef Kittler; Jon M Kleinberg; Friedemann Mattern; John C Mitchell; Moni Naor"}, {"title": "Robust Part-Based Hand Gesture Recognition Using Kinect Sensor", "journal": "IEEE Transactions on Multimedia", "year": "2013-08", "authors": "Junsong Zhou Ren; Jingjing Yuan; Zhengyou Meng;  Zhang"}, {"title": "Perceptuallysupported image editing of text and graphics", "journal": "Association for Computing Machinery", "year": "2003", "authors": "Eric Saund; David Fleet; Daniel Larner; James Mahoney"}, {"title": "Pomegranate: Fast and Flexible Probabilistic Modeling in Python", "journal": "Journal of Machine Learning Research", "year": "2018", "authors": "Jacob Schreiber"}, {"title": "Motion primitives for designing fexible gesture set in Human-Robot Interface", "journal": "", "year": "2011", "authors": "Suwon Shon; Jounghoon Beh; Cheoljong Yang; David K Han; Hanseok Ko"}, {"title": "Hand gesture vocabulary design: a multicriteria optimization", "journal": "", "year": "2004", "authors": "I Helman; Juan P Sstern; Yael Wachs;  Edan"}, {"title": "Real-time American Sign Language recognition from video using hidden Markov models", "journal": "", "year": "1995", "authors": "Thad Starner; Alex Pentland"}, {"title": "Real-time American sign language recognition using desk and wearable computer based video", "journal": "", "year": "1998-12", "authors": "Thad Starner; J Weaver; Alex Pentland"}, {"title": "Human Factors for Design of Hand Gesture Human -Machine Interaction", "journal": "", "year": "2006", "authors": "I Helman; Juan P Stern; Yael Wachs;  Edan"}, {"title": "Optimal Hand Gesture Vocabulary Design Using Psycho-Physiological and Technical Factors", "journal": "", "year": "2006", "authors": "I Helman; Juan P Stern; Yael Wachs;  Edan"}, {"title": "Optimal Consensus Intuitive Hand Gesture Vocabulary Design", "journal": "", "year": "2008", "authors": "I Helman; Juan P Stern; Yael Wachs;  Edan"}, {"title": "GestureGAN for Hand Gesture-to-Gesture Translation in the Wild", "journal": "", "year": "2019-07", "authors": "Hao Tang; Wei Wang; Dan Xu; Yan Yan; Nicu Sebe"}, {"title": "Stylistic gait synthesis based on hidden Markov models", "journal": "EURASIP Journal on Advances in Signal Processing", "year": "2012-03", "authors": "Jo\u00eblle Tilmanne; Alexis Moinet; Thierry Dutoit"}, {"title": "Kinect Based Dynamic Hand Gesture Recognition Algorithm Research", "journal": "", "year": "2012", "authors": "Youwen Wang; Cheng Yang; Xiaoyu Wu; Shengmiao Xu; Hui Li"}, {"title": "American sign language recognition with the kinect", "journal": "ACM Press", "year": "2011", "authors": "Zahoor Zafrulla; Helene Brashear; Thad Starner; Harley Hamilton; Peter Presti"}, {"title": "Online hand gesture recognition using neural network based segmentation", "journal": "", "year": "2009", "authors": "Chun Zhu; Weihua Sheng"}], "figures": [{"figure_label": "2", "figure_type": "", "figure_id": "fig_0", "figure_caption": "Figure 2 :2Figure 2: Preference gallery interface for generating synthetic samples. The user selects the synthetic samples to include in the dataset by comparing them to the original demonstration for the purpose of training the primitive recognizers.", "figure_data": ""}, {"figure_label": "3", "figure_type": "", "figure_id": "fig_1", "figure_caption": "Figure 3 :3Figure 3: Output of the discernability tool when tested with the fst fne primitive. It produces a chart giving the average negative log likelihoods of the fst's demonstrations given the recognizers for the other fne primitives.", "figure_data": ""}, {"figure_label": "4", "figure_type": "", "figure_id": "fig_2", "figure_caption": "Figure 4 :4Figure 4: (a) Full visual script declaration for Grow. Note that the green start node and red end node indicate the start and end of the declaration. Edges between the nodes indicate the sequential order of the nodes. Each node has two felds indicating the fne and gross components. (b) Right clicking or declaring a new node reveals this menu from which the designer can select the fne and gross components of the node. (c) The pull-down down menu showing the primitive gesture options to select from. (d) The menu for declaring the number of loops on a specifc node. (e) The context menu shown when right clicking on a node.", "figure_data": ""}, {"figure_label": "5", "figure_type": "", "figure_id": "fig_3", "figure_caption": "Figure 5 :5Figure 5: A visual declarative script for Grow for a twohanded scenario. Note that the top of each node represents the left gesture component and the bottom represents the right gesture component.", "figure_data": ""}, {"figure_label": "16", "figure_type": "", "figure_id": "fig_4", "figure_caption": "1 .Figure 6 :16Figure 6: (left) The original smoothed time-series velocity trace of a downward motion projected on a yz-plane. (right) An illustration of equidistant resampling of the trace.", "figure_data": ""}, {"figure_label": "7", "figure_type": "", "figure_id": "fig_5", "figure_caption": "Figure 7 :7Figure 7: (a) An eight-state HMM for a fne primitive. (b) Fine component of complex gesture, consisting of gesture \u0434 1 followed by gesture \u0434 2 looped twice. Here, the corresponding HMM of \u0434 2 is concatenated to \u0434 1 and looped. (c) Fine decoding HMM by parallel HMMs corresponding to fne primitives \u0434 1 , ..., \u0434 m and a transition from the end e to start s.", "figure_data": ""}, {"figure_label": "8", "figure_type": "", "figure_id": "fig_7", "figure_caption": "Figure 8 :8Figure8: (a) All gross primitives. Note that for the right hand circle, the direction is counterclockwise while for the left hand circle, the direction is clockwise. For the right hand waves, the gesture starts by going right while for the left hand waves, it starts by going left. (b) All fne primitives for the right hand, which are mirrored for the left hand.", "figure_data": ""}, {"figure_label": "9", "figure_type": "", "figure_id": "fig_8", "figure_caption": "Figure 9 :9Figure9: (a) The overall recognition rate on all complex gesture data when all the participants' primitive data is used for training. (b) The cross-validation recognition rate when trained with one participant's primitive data versus if trained with seven participants' primitive data. This shows that with more variety in user training data, the recognizers are more robust against new users' gestures. (c) The recognition rate when trained with fve samples randomly selected for each primitive versus training with those fve and ten synthetically generated from those fve. (d) The online recognition rate when the primitives are trained with data from all eight users. (e) The number of errors per node for decoding complex gestures. Note that one-handed complex gestures have three felds per node, while two-handed have fve felds per node.", "figure_data": ""}, {"figure_label": "10", "figure_type": "", "figure_id": "fig_9", "figure_caption": "Figure 10 :10Figure 10: The fve novel primitives that the designers came up with. Stir is a gross primitive which is one counterclockwise circle in the horizontal plane.", "figure_data": ""}, {"figure_label": "11", "figure_type": "", "figure_id": "fig_11", "figure_caption": "Figure 11 :11Figure 11: The fve-point Likert responses to the post-design questionnaire.Here, SA is strongly agree, A is agree, N is neutral, D is disagree, and SD is strongly disagree.", "figure_data": ""}, {"figure_label": "1", "figure_type": "table", "figure_id": "tab_1", "figure_caption": "Visual script declarations of the three complex gestures Shrink, MadRiddles and Grow. The hand actions show how the gesture is performed. Note that the visual script nodes are in chronological order from left to right.", "figure_data": "GestureVisual Script DeclarationdownStartEndpalm-sideShrinkforwardrightbackwardStartpointpalm-downthumbsEndMadRiddles33xcircleforwardStartfistpalm-frontEndGrowanimation frames presenting the dynamic hand gesture primitivesare shown to Alice, as shown in Figure 2. The preference gallerypresents two synthesized demonstrations, as well as the originaldemonstration for comparison. Alice then indicates which of theanimations from the preference gallery, if any, are suitable demon-strations of the desired primitive gesture. The recognizer for thisnew primitive gesture is trained using these synthesized gestures,hence increasing the recognizer's robustness to diferent variations."}, {"figure_label": "3", "figure_type": "table", "figure_id": "tab_2", "figure_caption": "List of the 10 two-handed complex gestures col-Train-on-7 instead trains on primitive data from seven participants and tests on the complex gesture from the other single participant. These results are shown inFigure  ", "figure_data": "GestureDeclarationShrink1. down / palm-sideGestureVisual Script DeclarationPush1. forward / palm-frontShrink1. down / palm-side / down / palm-sideTickTock1. waves / palm-frontPush1. forward / palm-front / backward / palm-frontPeaceOut1. left / peace2. backward / palm-front / forward / palm-frontExecution1. up / fstTickTock1. waves / palm-front / waves / palm-frontCaterpillar1. right / pinchPeaceOut1. left / peace / left / peaceFlamingo1. up / pinchExecution 1. up / fst / up / fst2. left / peaceCaterpillar 1. right / pinch / left / pinchCheshireDance 1. backward / thumbsFlamingo1. up / pinch / up / pinch2. circle / point / 32. right / peace / left / peaceGrow1. circle / fst / 3Cheshire-1. backward / thumbs / backward / thumbs2. forward / palm-frontDance2. circle / point / circle / point / 3MadRiddles1. forward / pointGrow1. circle / fst / circle / fst / 32. right / palm-down2. forward / palm-front / forward/ palm-front3. backward / thumbsMadRiddles 1. forward / point / forward / point2. right / palm-down / left / palm-down3. backward / thumbs / backward / thumbsother seven participants; and"}, {"figure_label": "4", "figure_type": "table", "figure_id": "tab_3", "figure_caption": "List of the fve one-handed complex gestures designed by designers during the design study. The gesture nodes are listed in sequential order with each being denoted as gross-primitive / fne-primitive / (repeats), where repeats are blank if it is 1.", "figure_data": "Complex Gesture Visual Script DeclarationSpiderweb1. forward / spiderman2. backward / palm-frontAlright1. circle / ok / 22. up / okDispose1. left / grasp2. forward / pinchCauldron1. stir / fst / 3Shotgun1. right / gun2. left / fst"}], "doi": "10.1145/3411764.3445766"}