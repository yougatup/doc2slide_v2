{"authors": "Jung Eun Yoo; Kwanggyoon Seo; Sanghun Park; Jaedong Kim; Junyong Noh", "pub_date": "", "title": "Virtual Camera Layout Generation using a Reference Video", "abstract": "Figure 1: Given a reference video (the frst row), our method generates a virtual camera layout in a 3D scene, which follows the cinematic intention of the reference video. Our method works for characters with diferent (the third row) as well as similar (the second row) body proportions from/to those of humans. The frames on the top left are from Back to the Future (R. Zemeckis, 1985)  \u00a9Universal Pictures. Characters and background assets used for bottom right images: \u00a9Mix and Jam, \u00a9Jeremy Vikery and Alex Mateo.", "sections": [{"heading": "INTRODUCTION", "text": "Camera layout is an important component of cinematography to deliver the emotion and suspense of a scene. The director creates a guideline, known as a shot list, to communicate with a 3D animation layout artist. The layout artist uses the shot list as a reference to position the virtual camera in order to best deliver the cinematic intention of the director. However, for most novice users, it is difcult to express intentions precisely through a virtual camera due to its high degree of freedom (DOF). For professional artists, it is time-consuming to position numerous virtual cameras repeatedly, as is common during the production of a TV series.\nAutomatic methods have been proposed to analyze the camera layout of a reference video and to generate a virtual camera layout for a given scene. These methods typically use computer vision and machine learning techniques to classify types of framing [4,7,33] and camera movement [5,10,17]. However, the framing and camera movement types they can handle are limited to only a small subset of various types, meaning that their practical use is highly limited. Furthermore, previous studies mostly focus on designing a specifc language model to generate the virtual camera layout [3,11,26,31,35], which thwarts its use by novice users.\nTo ease the virtual camera layout process, we designed our method considering the common practices performed in TV or animation studios, where a reference video or images are heavily used in the early stages of the production process or for previz purposes. Our method works with 3D scenes for which the staging and animation are similar to those of the reference video. Specifcally, we analyze the intention of a reference video and create the virtual camera layout of a given scene using a shot list as a communication medium to transfer the cinematic intention. Because reference videos such as live-action movie clips have well-established cinematography, imitating the camera layout in these cases will help novice users as well as experts in this process to generate a satisfying initial virtual camera layout without much efort.\nThe workfow of the proposed method consists of the following three steps. First, the reference video is segmented into a sequence of shots. Second, we analyze each shot to extract information related to the camera layout, which includes the types of framing and camera movements, and the visual features of the subjects. Next, we match the subject to the character in the 3D scene. All of this information is stored in the shot list and is then used to generate the virtual camera layout. Third, based on this information, the virtual camera is positioned and animated with respect to the characters in the 3D scene. A stylized or exaggerated character with a diferent body proportion from that of a human is common in 3D animation. To handle these characters when applying the intended framing type, we utilize the skeletal information of the target character. Once the camera is positioned based on the framing type, we create a smooth camera path between the start and end frames to follow the camera movement type.\nWe demonstrate the efectiveness of our approach by visually comparing the generated virtual camera layout with that of the reference video. We also conducted a user study to evaluate the quality of our framing results on exaggerated characters by comparing them with the results from the previous method [25] and from the artist. We successfully confrmed that the results with the proposed method were preferred over those from the previous method and that the quality was comparable to that of the artist's layout. We conducted an additional user study of the efectiveness of our method. This study confrmed that both amateurs and professional layout artists spent much less time when replicating a reference video using our method as compared to relying on the conventional manual process.\nIn summary, our method can automatically generate a virtual camera layout for a 3D animation scene. The generated virtual camera position efectively assists the user in achieving the fnal layout result that refects the cinematic intention of the reference video. We also propose a customized solution for stylized or exaggerated characters that are commonly used in 3D animation. Our method is able to reproduce the intended semantics of the camera layout from the reference video for characters with signifcantly diferent body proportions from those of a human using optimization based on skeletal parts and the framing type.\nThe main contributions of the paper can be summarized as follows:\n(1) A system that analyzes a reference video to generate a virtual camera layout for a 3D animation and that is capable of adapting to stylized characters with non-realistic body proportions. (2) A means to analyze and extract framing and camera movements from a reference video. (3) A novel optimization scheme that positions a virtual camera for both stylized as well as human characters. (4) A camera layout generation better than or comparable to the Toric space method and the artist's camera layout.", "n_publication_ref": 12, "n_figure_ref": 0}, {"heading": "RELATED WORK 2.1 Camera Layout Analysis", "text": "To construct a shot list of a reference video, the following information is needed: the start frame, end frame, framing type, and the camera movement type. In this section, we focus on framing and camera movement. Regarding the extraction of the start and end frames of a shot from a video, please refer to the survey by Smeaton et al. [34].\nFraming is determined by the distance from the camera to the subject. Conventional methods [4,7] use hand-crafted features, while a more recent method [33] uses a convolutional neural network (CNN) to classify framing into various types. While these methods have reported some success in classifying the framing of input images, they are limited to three types of framing. Camera movement can be analyzed using a sequence of frames in each shot. Most of the previous methods do not include the movement type [5,10,17], which expresses the direction of the motion. Although Derue et al. [10] is an exception, their method uses only two consecutive frames to predict the camera movement type. Recently, SGNet [29] used a CNN to analyze the camera framing and movement in a given shot jointly. This method classifes framing into fve types (extreme close-up,close-up, medium shot,full shot, and long shot) and movements into four types (static, motion, push, and pull). In this work, we use six diferent scales for framing and 13 diferent types of camera movement to represent translational, rotational, or curved motions with the direction. This faithfully refects the basic camera movement semantics, which are widely used in practice (Fig. 2).", "n_publication_ref": 9, "n_figure_ref": 1}, {"heading": "Virtual Cinematography", "text": "Reproducing a camera layout using a shot specifcation has been studied in the felds of virtual cinematography. One popular approach is to provide a shot specifcation through a high-level camera composition language that describes established flming styles and techniques. These languages, often delivered in the form of text, describe how the shot is composed and what the setup constraints are for virtual camera placement [11,23,26,31,35]. This method is direct and clear yet requires a certain degree of cinematic knowledge. Shot specifcations can be given through images as well. Bares et al. [3] designed an interface for a user to visualize camera compositions through storyboard frames. This allows the user intuitively to design a shot composition, and the fnished storyboard frame is later translated into an established language for virtual camera placement. In this work, we analyze the layout information and visual features of the subjects from the reference video and use them as a medium for a specifcation.\nVarious techniques have been proposed to compute the camera position and motion for both drone and virtual cinematography [9] . Studies of drone cinematography investigate drone control and path planning during aerial shots [2,13,15,16,[19][20][21]27]. Regarding the positioning of a virtual camera, Bares et al. [3] proposed a constraints-based approach that heuristically searches for possible camera parameter values that satisfy the constraints. Ranon and Urli [28] proposed an optimization approach that fnds the viewpoint of a camera that maximizes the objective function. Lino and Christie [24,25] proposed a novel camera viewpoint representation, known as the Toric space, which reduces the conventional 7 DOF search space to 4 DOF. Constraints such as the size and on-screen position of the character's head and the camera distance can be algebraically expressed in the Toric space, enabling intuitive placement as well as control of the camera by the user. Utilizing the Toric space, Wu et al. [35] calculated the position and orientation of a virtual camera based on the visual features delivered through their proposed flm language. Galvane et al. [12] attempted to generate a smooth path and movement of the camera using a character motion and userdefned framing for the start and end frames. Burg et al. [6] proposed a method that generates real-time occlusion-aware camera motion by maximizing the visibility of a target subject throughout a motion path.\nRecently, Jiang et al. [22] employed an example-driven method to control a virtual camera automatically and produce various stylistic variations of a 3D animation. Similar to Jiang et al. [22], our system takes the analyzed layout information and visual features from a reference video as input. While Jiang et al. [22] focus on generating continuous camera motions only for human characters, we focus on reproducing the framing of a scene, which works with various targets including stylized characters with non-realistic body proportions matching those common in computer animations. Furthermore, with our method shot-level editing can be achieved easily given that the virtual camera is generated for each shot.", "n_publication_ref": 25, "n_figure_ref": 0}, {"heading": "A CAMERA LAYOUT PRIMER", "text": "In this paper, we focus on two main components of the camera layout (Fig. 2): framing and camera movement. For a complete list of camera layout components, please refer to the book by Arijon [1]. Framing is the artistic style of placing a subject in the shot. It can be classifed into diferent types based on how much of the subject is included on-screen. While framing can be defned for any subject, we assume that the subject in the reference video is human, as observed in most live-action movies. Framing can be categorized into six diferent types based on the representative body parts of a human subject. A close-up (CU) includes the subject's face area only. A medium close-up (MCU) includes both the subject's face and shoulders. A medium shot (MS) includes the waist and upper parts of the subject's body. A medium long shot (MLS) includes the knees and upper parts of the body. A full shot (FS) flls the frame with the entire body of the subject, from the head to the feet. A long shot (LS) positions the camera farther away than a FS does, with the subject occupying only part of the frame.  Camera movement creates dynamics in a shot. While numerous flm techniques related to camera movement exist, we chose seven basic camera movements, 13 in total considering the direction. Static refers to a stationary camera. Tilt and pan have rotational motion about the x-axis and y-axis of the camera coordinate frame, respectively. Crane has rotational motion about the x-axis of the camera coordinate frame and translational motion along the y-axis of the world coordinate frame. Orbit has rotational motion about the horizontal axis of the world coordinate frame, resulting in an arc motion. Track and dolly have translational motion along the x-axis and the z-axis of the camera coordinate frame, respectively. With directional information included, the camera movement types are complete enough to generate virtual camera movement.", "n_publication_ref": 1, "n_figure_ref": 1}, {"heading": "VIRTUAL CAMERA LAYOUT GENERATION FRAMEWORK", "text": "Our method generates a virtual camera layout by following the cinematic intention of the reference video. Given an input reference video with an arbitrary length, frst we detect the shot boundaries using the method of Zhang and Wang [36]. The method is trained with the TRECVID dataset [34] for the labeling of the start and end frames of the shots in the video. It is important to segment the video into a sequence of shots because every single shot has a diferent camera layout, resulting in a unique visual style and emotional tone.\nUsing the detected shot boundaries, we enter the start and end frame numbers of each shot on the shot list. Next, in the Camera Layout Analysis (CLA) stage (Section 4.1), we use a shot from the previous stage as input and utilize computer vision techniques to extract the subjects' visual features (head orientation, area, and position), the framing, and the camera movement. Additionally, by comparing the reference video and the staged 3D assets, we manually associate the subjects with the characters. All of this information above is stored as a shot list which will be used to generate a virtual camera.\nIn the Virtual Camera Layout Generation (VCLG) stage (Section 4.2), we calculate the virtual camera position in the Toric space [25] and further optimize it to satisfy the visual constraints of the reference shot. Finally, the camera motion is generated based on the information from the shot list. The user can also fne-tune the camera position, as is done during the 3D animation work fow using 3D software. An overview of our system is shown in Fig. 3. In this work, we focus on identifying the framing and camera movement of the reference video to construct a shot list and then to generate a virtual camera layout using the shot list. Therefore, we will discuss the CLA and VCLG in detail in the following sections.\nFigure 3: The proposed framework initially divides the input reference video into a sequence of shots using a shot boundary detection method. The shots are then analyzed to extract the camera layout information, whose results are stored in a shot list. Using the shot list, 3D assets, and matched characters, the initial virtual camera layout is generated in the 3D scene, which matches the semantics of the camera layout of the reference shot. The user can fne-tune the virtual camera position further if desired. The reference video on the top left are from Back to the Future (R. Zemeckis, 1985) \u00a9Universal Pictures.", "n_publication_ref": 3, "n_figure_ref": 2}, {"heading": "Camera Layout Analysis", "text": "With the detected shot boundaries for a given video, we separate the video into shots and analyze each shot to extract the camera layout.\n4.1.1 Framing. When positioning the camera, there are a few important factors to consider, specifcally the screen position and framing type of the subject. The framing type of the subject can be determined using the visibility of the estimated human keypoints or the skeletal parts of the subject, as described in Section 3. The screen position of the subject can be extracted using an of-theshelf 2D human pose estimation method, LCR-Net [30]. However, in some cases, LCR-Net fails to detect or inaccurately estimate the keypoints. In addition, classifying the framing type when two or more subjects are present in a scene can lead to ambiguous results.\nIn this case, we select as the main subject one who is front-facing for the analysis or classify the subject based on its detected region by LCR-Net [30]. We employ and fne-tune a pretrained CNN model, ResNet [18], for framing type classifcation, as was done in Savardi et al. [33]. Because no such dataset for the six framing types defned in Section 3 exists, we manually collected and labeled live-action movies. In total, 6180 and 697 frames were labeled for training and testing, respectively. Please refer to the supplementary document for more details. At inference time, the network classifes the framing type given an input frame. We also estimate the head size and orientation of the subject, a process which is essential for positioning the virtual camera in the Toric space. The head size is calculated by constructing a bounding circle of the subject's head. The center coincides with the head position p head , and the radius is computed as r = ||p head \u2212p neck || 2 where p neck is the position of the neck joint. The ratio between the head area and the image resolution, s r at io , is then calculated using the radius r and the height and width of the image. Lastly, from the given head area, we estimate the head orientation of the subject in the camera coordinate using a method devised by Ruiz et al. [32]. The framing information, specifcally the framing type, head position, head area, and the head orientation, are added to the shot list for later use. Given a shot, we analyze the camera movement by constructing a motion vector and training a feedforward neural network as supervised learning. To construct the motion vector for a shot, we follow the method of Derue et al. [10]. A dense optical fow is initially computed for every consecutive frame of the shot. To improve the accuracy when capturing the camera motion, we mask out dynamic objects, in our case humans, using a semantic segmentation method [8]. Subsequently, we construct a N -bin histogram using the orientation of the optical fow for all frames after optical fows with low magnitudes are discarded. Here, the camera movement direction (i.e. dolly in and out) cannot be diferentiated if only orientation values are used because the values do not convey spatial information. To analyze both spatial and temporal information in the entire shot, we divide the dense optical fows into nine equal sections using the rule of thirds. For each region, a histogram is computed, and all nine sections are concatenated to form a single motion vector M. M is further normalized with respect to the length of the shot, as every single shot difers in terms of the total number of frames. Using M as the input, a three-layer fully connected neural network is trained for camera movement classifcation. The model is trained on a synthetic dataset built using the Unreal Engine. Please refer to the supplementary document for more details. At the inference time, the network inputs M and classifes the camera movement type of the shot. The inferred camera movement for each shot is stored in the previously generated shot list.", "n_publication_ref": 7, "n_figure_ref": 0}, {"heading": "Virtual Camera Layout Generation", "text": "With a shot list consisting of the camera layout and visual features of the reference video, we generate the framing and camera movement of the virtual camera for the 3D animation scene. First, we manually match the subjects from the reference video with the names of the target virtual characters. When there are two subjects in the video, the one with better visual features (i.e., head facing the camera direction) is selected as the main subject. The corresponding matched character is considered as the main target. Using this association, the virtual camera is positioned and keyed. The following explains how the framing and camera movement of the virtual camera are determined based on the information contained in the shot list.", "n_publication_ref": 0, "n_figure_ref": 0}, {"heading": "4.2.1", "text": "Framing. Given a shot list and 3D characters, we calculate the camera position and orientation in the 3D scene. Finding the camera position for a single character is straightforward. With the on-screen ratio s r at io , the distance d from the camera to the character is computed as\nW \u2022 R d = ,(1) 2 tan\n(\u03d5/2) \u2022 r p where r = (W \u2022 H \u2022 s r at io )/\u03c0 is the on-screen radius, R is the actual radius of the character's head, and \u03d5 is the horizontal feld of view of the camera. W and H represent the width and the height of the screen resolution of the camera, respectively. This distance determines a spherical manifold of potential camera positions. With a given head orientation estimated by the CLA method and the head rotation of the virtual character, a point on this manifold is determined as the fnal camera position.\nWhen two characters are present, we fnd the camera position in the Toric space [24,25], where the position of a point in the space is represented by three camera-characterrelated parameters as shown in the left inset fgure: the angle \u03b1 between the two vectors from the camera to the characters and the horizontal and vertical camera angles around the characters, \u03b8 and \u03c6, respectively. \u03b1 can be calculated using the on-screen positions of the characters and the angle of view of the camera. \u03b8 and \u03c6 are estimated by matching the head orientation of the selected main target character to that of its corresponding reference subject. Framing stylized characters. While the method described above can handle virtual human characters with normal proportions, characters appearing in a virtual scene can have diferent body proportions from that of humans. As can be seen in the inset fgure on the right, the same on-screen position and ratio can result in diferent on-screen visibility outcomes due to the characters' diferent body proportions. To address this issue, we interviewed professional layout artists with more than fve years of experience. The interview helped us to understand how the artist deals with mismatches between the body proportions of the subjects from the storyboard and those of the actual target characters. Three factors that concerned the artists were visibility, the degree to which the subject's body part is visible; headroom, the vertical space between the subject's onscreen head-top position and the upper boundary of the screen; and composition, the on-screen placement of the subject which focuses more on the horizontal arrangement.\nFigure 5: On-screen visibility refers to the vertical space occupied by the character on the screen, whereas headroom refers to the vertical space between the top of the character's head and the upper boundary of the screen. The horizontal on-screen midpoint is the u coordinate of the center of the two characters' on-screen positions, p A (u A , v A ) and p B (u B , v B ).\nWe adopt the factors mentioned by the artists as constraints to layout the stylized characters. Similar to how diferent keypoints are used to classify diferent framing types, diferent skeletal parts of the target are used to calculate the camera-character distance that ensures the desired level of visibility. We optimize the normalized on-screen position p A (u A , v A ) \u2208 [0, 1] 2 and p B (u B , v B ) \u2208 [0, 1] 2 of target characters A and B to determine \u03b1 in the Toric representation, such that the resulting layout satisfes the constraints given by the reference subjects A \u2032 and B \u2032 specifed on the shot list. First, we modify the defnitions of some of the notations used in Equation 1. The vertical length from the character's head to a specifc part serves as the actual size R, and the ratio between the vertical pixel length from the on-screen head position to the lower boundary of the screen and the height of the screen serves as the desired on-screen ratio s r at io . In the LS case, which has the same corresponding skeletal parts as a FS but covers a greater area of the scene, we subtract an ofset of 0.3 from the desired on-screen ratio. Thus, the target character is captured in a smaller area of the screen, leaving more room for the background. Given that the on-screen ratio is now a length ratio instead of an area ratio, the equation for the on-screen pixel length r is modifed as r = H \u2022 s r at io . Using these modifed defnitions and equations, the distance from the camera to the body feature of the character is recalculated.\nIn order to follow the framing types specifed on the shot list, we add a visibility term, as follows:\nE V = |s A \u2212 s A \u2032 | + |s B \u2212 s B \u2032 |,(2)\nwhere s A and s B denote the on-screen visibility of the target characters in the current layout (Fig. 5), which can be calculated by the function derived from Equation 1. s A \u2032 and s B \u2032 are the desired visibility of the target characters according to the framing type.\nTo ensure that the resulting layout has a reasonable headroom size similar to that of the reference, we add a headroom term.\nh = 1 \u2212 v \u2212 r head , E H = | min(h A \u2032 , h B \u2032 ) \u2212 min(h A , h B )|.(3)\nHere, h A , h B \u2208 [0, 1] correspondingly denote the headroom areas of characters A and B, respectively, and h A \u2032 , h B \u2032 \u2208 [0, 1] are likewise the headroom areas of reference subjects A \u2032 and B \u2032 , respectively. v \u2208 [0, 1] is the normalized vertical coordinate of the on-screen position of a target character whose radius of the on-screen head size is r head . Note that there may be a case where the height diference between the target characters is not similar to or even opposite from that between the reference subjects. Therefore, instead of optimizing the headroom sizes of both characters, we select a smaller headroom area among each of the target characters and the reference subjects for the calculation. This prevents a taller character's head from being unwantedly cut-of by the screen boundary. Finally, we add a horizontal arrangement term to ensure that the on-screen horizontal arrangement of the target characters is similar to that of the subjects in the reference. For instance, if the subjects from the reference are projected on the left half of the screen, this term prevents new on-screen positions from moving towards the right half.\nE M = |(u A + u B )/2 \u2212 (u A \u2032 + u B \u2032 )/2|.(4)\nHere, u A and u B are the normalized horizontal coordinates of the on-screen positions of characters A and B, respectively, and u A \u2032 and u B \u2032 are likewise the normalized horizontal coordinates of the on-screen positions of the reference subjects A \u2032 and B \u2032 , respectively.\nThe fnal optimization can be expressed as a linear combination of Equations 2 to 4 and the camera roll term E r oll :\narg min \u03c9 1 E V + \u03c9 2 E H + \u03c9 3 E M + \u03c9 4 E r oll .(5)\np A ,p B Here, \u03c9 1 , \u03c9 2 , \u03c9 3 , and \u03c9 4 are the weights for each term and are set to 0.7, 1.5, 0.7, and 1.5, respectively. E r oll penalizes the camera's right axis tilt to prevent camera roll. We used the SLSQP algorithm for optimization.", "n_publication_ref": 2, "n_figure_ref": 2}, {"heading": "Camera Movement.", "text": "Once the framing is determined, the camera movement is generated by interpolating the camera placements at the start and end keyframes of the shot. However, the initial placement often does not satisfy the constraints of the camera movement rules (i.e., fxed position for panning). Furthermore, a linear interpolation would not be applicable because our camera movements include complex types, such as an orbit that requires arc motion. Thus, we employ a rule-based approach to modify the camera movement. It recalculates the position at the end frame or adds keyframes in the middle so that the camera can correctly follow the conventional rules defned in Fig. 2. The magnitude of the camera movement is estimated according to the change of the camera-character relationship (i.e., the relative position and orientation) at the start and end frames of the shot. Please refer to the supplementary document for more details.", "n_publication_ref": 0, "n_figure_ref": 1}, {"heading": "IMPLEMENTATION", "text": "Our system was implemented in Python and QT, and the VCLG application was built on top of Autodesk Maya 2018. This application allows the artist to adjust the shot list and the characters' properties further if necessary. For more information on the application, please refer to the supplementary document. The computation time for the CLA method is 0.368 seconds per frame for a video of resolution 576 \u00d7 420 on a machine with an Intel Core i7-5820 processor running at 3.3GHz, 32GB of memory, and a NVIDIA GeForce GTX 980 Ti graphics card. A typical shot lasts around fve seconds. In the VCLG, the computation time is 6.85 seconds per optimization.", "n_publication_ref": 0, "n_figure_ref": 0}, {"heading": "EVALUATION", "text": "To validate our method, we present visual results from our method along with the fndings from an extensive user evaluation. The user study utilized various stylized characters to compare the following: layouts generated using our method, layouts generated using the Toric space method [25], and layouts created by a professional artist.\nIn addition, we conducted a user study of the efectiveness of the entire system with novice users and artists.", "n_publication_ref": 1, "n_figure_ref": 0}, {"heading": "Qualitative Evaluation for the Virtual Camera Layout", "text": "Using our system, we automatically generated virtual camera layouts for two datasets, Back to the Future [12] and Counseling, which consist of a reference video and a 3D scene with characters staged in advance. The Back to the Future video clip is 48 seconds long and has 12 mostly static shots. The length of the Counseling video is 34 seconds and it contains seven shots. The shots include static, track, dolly, orbit, and tilting camera movements. The results are shown in Fig. 6 and Fig. 7 for Back to the Future and Counseling, respectively. For more results, please refer to the supplementary video.\nAs shown in Fig. 6a, the framing results resemble the reference shots. With the visual features identifed only at the start and end frame along with the classifed camera movement type, the camera movement of the reference shot is successfully reproduced for the 3D scene, as shown in Fig. 6b. We also compared the results with the artist's layout provided by previous work [14], as shown in Fig. 8. We fnd from the layout by the artist that they focused on the framing and headroom of the character. The Toric space method, which is the initial position of the virtual camera before optimization by our method, fails to deliver the cinematic intention of the reference shot in some cases despite the close resemblance of the target characters to the reference subjects, as shown in the bottom row of Fig. 8. This may stem from a slight diference in the characters' heights, animation, and/or staging. The method proposed in Jiang et al. [22] is also afected by a similar limitation given that the method is learned from human characters with Toric representation. In contrast, our method was able to handle slight discrepancies between the reference and target scenes through optimization and generate a layout similar to that from the artist.\nFor the Counseling dataset, we show the results with two diferent types of characters. The frst type is human characters (Fig. 7b), and the second type is robot characters with body proportions diferent from those of humans (Fig. 7c). Note that our method works well in both cases, as shown in Fig. 7b and Fig. 7c. In contrast, when only using the Toric space method to position the camera, the virtual camera layout is vastly diferent from the reference video, as shown in Fig. 7d, when the character does not have human-like body proportions.\nAdditionally, we investigated how each term in Equation 5affects the virtual camera layout of exaggerated characters, as shown in Fig. 9. Without E V , the framing type does not match the framing of the reference shot. While the composition and the framing type match without E H , the headroom is vastly diferent from the reference video. E M has an efect on the horizontal composition of the character. Hence, without E M , the positions of the characters can be shifted to the right or left.", "n_publication_ref": 3, "n_figure_ref": 12}, {"heading": "User Study: Comparison of Virtual Camera Layout Results", "text": "To evaluate the efectiveness of our virtual camera layout, we conducted a user study in which the participants were asked to evaluate and compare the results from the following methods: our method, the Toric space method, and the virtual camera layout created by the artist. We prepared 56 static shots, which were generated from 14 reference shots using 4 diferent pairs of target characters (Fig. 10b). The reference subjects had average human body proportions, whereas the target characters had various exaggerated body proportions, as shown in Fig. 10a. Fifteen participants (6 males and 9 females; ages: 24 to 32; average age: 28.1; three artists with 3 to 5 years of 3D animation experience) flled out a questionnaire consisting of two parts: a subjective rating for user satisfaction and a 2-alternative forced choice (2AFC) test after examining the provided shots. For the subjective rating, the participants were presented with a pair of shots consisting of a reference shot and the corresponding shot; these were randomly selected among the three methods. They were asked to score on a 5-Likert Scale how satisfed they were with the framing result. For the 2AFC test, framing results produced by the two diferent methods were presented in random order, along with the corresponding reference shots. The participants were asked to choose the preferred result.\nTable 2: User study results from subjective rating of framed layouts generated by three diferent methods. For each method, 56 shots were rated by 15 participants on scale of 1 (low) to 5 (high). Total of 840 ratings were made per method. % positive refers to percentage of layouts that were rated above 3 (neutral). The results in Table 2 verify that the virtual camera layouts generated by our method (73%) were more faithful reproductions of the reference camera layouts than were the virtual camera layouts generated by the Toric space method (47%), and similar in quality to the virtual camera layouts created by the artist (77%). For statistical analysis, we applied the Kruskal-Wallis rank sum test. The results showed that there exist signifcant diferences among the ratings of the layout methods (F (2, 2517) = 126.59, p < 0.05). A post-hoc analysis using the Dunn test with Bonferroni correction revealed that, as shown in Fig. 11, ratings on layouts by the artist and our method were signifcantly diferent from those by the Toric space method (p = 0.00), whereas ratings between these frst two methods were not signifcantly diferent (p = 0.19). Fig. 12 shows average ratings for the layouts created by each method with respect to each character pair. We applied the Kruskal-Wallis test and the Dunn test to all of the sub-data. These tests showed that the Toric space method scored signifcantly lower (p<0.05) than the other two methods for all pairs (p<0.001 for Pair B and D).\nThe pairwise comparisons reported in Table 3 show that our method was preferred over the Toric space method by 74%. Compared to the layouts created by the artist, those created by our method were preferred by 47%, showing a similar preference. These results verify that our method can generate layouts for a wide range of stylized characters with diferent body proportions while faithfully reproducing the original camera layout of the reference shot. In addition, the layouts generated by our method are comparable to the virtual camera layouts created by the artist.", "n_publication_ref": 0, "n_figure_ref": 4}, {"heading": "User Study: Replicating a Reference Video", "text": "We conducted an additional user study to validate the efectiveness of the entire system. Fifteen participants were recruited (10 males and 5 females; ages: 25 to 46; average age: 32.9) and given the task of positioning and moving the virtual camera according to the reference video. Nine of the participants were novice Maya users with limited experience in 3D animation. The remaining participants were professional artists in a related industry, three    of whom had more than 10 years experience. Three of the artists artists reported that they used Maya on a regular basis. The user were from an animation studio (ASA1, ASA2, ASA3); the remaining study, on average, took approximately 50 minutes. three were from a VFX studio (VA1, VA2, VA3). Four out of the six The participants were asked to replicate the camera layout of a reference video into a Maya scene (i) without initialization of    the virtual camera, as in the conventional layout process and (ii) with the initialized virtual camera using our method. For this task,   we used the Counseling dataset and measured the time the participant spent to replicate the reference video. Before starting the experiment, the participants were asked to fll out a demographic questionnaire, followed by a brief explanation of our system. We asked the participants to use the virtual camera to replicate the layout observed in the reference video as closely as possible. The order of replication with or without using the initialized virtual camera layout was randomly selected. During the task, the participants actively referred to the reference video and were allowed to seek help from the proctor if needed. Once the task is completed, the participants were asked to fll out a survey about the usability of the system. Overall, the time performance was greatly improved, as evidenced by the 54.9% decrease in average time spent composing the virtual camera layout (without initialization using our system: 12 min 36 sec; with initialization using our system: 6 min 56 sec). For the novice users, the average time to replicate the reference video decreased by 52.4% (without initialization using our system: 14 min 39 sec; with initialization using our system: 6 min 58 sec). The time for the professional artists to replicate the reference video decreased by 27.9% (without initialization using our system: 9 min 31 sec; with initialization using our system: 6 min 52 sec). 6.3.1 Usability Survey and User Observation. The survey consists of six statements, and the participants rated how much they agreed with each statement on a fve-point Likert scale. This survey checks whether the overall system and our GUI help to alleviate the burden of and lower the barrier of entry when positioning the virtual camera. The average scores of the survey were 3.47 and 4.74 for professional artists and novice users, respectively. These results show that the novice users found our system helpful when generating the camera layout, whereas the professional artists were more neutral regarding its usability.\nWe attribute this to familiarity diferences with regard to animation tools between artists and novice users. As we observed throughout the experiment, the novice users experienced some difculty when navigating the native interface of Maya, especially when searching for corresponding target characters. Our GUI provides a shot-list-like interface that allows users quickly to locate target characters and navigate shots. Furthermore, the novice users had difculty controlling the camera and were uncertain about their work when replicating the layout. As one novice user commented after replicating the layout manually, \"even if I kept spending more time revising the camera by myself, the results did not improve that much. \" Our system provides the initial layout that best follows the cinematic intention of the reference. Thus, compared to manual work from scratch, the initial layout efectively mitigates the efort needed when replicating the reference.", "n_publication_ref": 0, "n_figure_ref": 0}, {"heading": "Interview of Professional Artists.", "text": "The general consensus we found from the artists interview was that the system was useful because it utilizes a shot list to generate an initial virtual camera layout for animation. ASA2 said he would \"defnitely use this system\" if he had to replicate a reference video. Additionally, ASA3 commented that the system would be very useful when an artist has to work on hundreds of shots, which is common during the production of a TV series. The ASA group further unanimously commented that if a story reel can be similarly analyzed to generate a virtual camera layout, it would be very helpful in the animation studio. In addition, VA3 mentioned that our system would be very useful for directors, who have little or no knowledge of 3D animation software, allowing them to previsualize the layout using a reference video. On the other hand, both the VA group and the ASA group felt that generating a camera layout based on classifed framing and camera movements may limit the artistic style of a virtual camera layout. Thus, they would always prefer to retouch the virtual camera's position and orientation. Nevertheless, the artists were generally optimistic about the direction of our approach.", "n_publication_ref": 0, "n_figure_ref": 0}, {"heading": "DISCUSSION 7.1 Use Cases of the System", "text": "Our system can be used by both novice and professional users. From the user study and interview, we found that many novice users had difculty placing the virtual camera in a conventional environment.\nIn contrast, with the initial position already generated by the system, the users comfortably began to manipulate the virtual camera and move it to a desired position with a considerable time improvement. This implies that any person with little knowledge about 3D animation tools can rapidly test out diferent virtual camera layouts in the previsualization stage. For professional use, the proposed system can be highly instrumental for TV cartoon animations, during which artists must work on many shots regularly as the series continues. For example, scenes with dialogues consist of multiple shots with short-term intervals. These shots are often similar in terms of their layouts, but as the target character changes after each shot, continuing requires animators manually to locate the frame and place the camera based on the target character one by one. With our system, using the prepared shot list containing the shot information, such repeated work can be expedited, allowing more time for animators to focus on the details of the layout.", "n_publication_ref": 0, "n_figure_ref": 0}, {"heading": "Limitations and Future Work", "text": "While our method can successfully generate a virtual camera layout using a reference video, it has certain limitations. Since the CLA method relies on the performance of a previous computer vision algorithm [10,30], the classifcation often fails for videos with over and under exposed frames. In most misclassifed framing task, the framing type difers within a single scale. With regard to camera movement classifcation, most misclassifed results stem from similar camera motions with the same direction. To remedy these instances, we provided a GUI for the user, allowing them easily to correct misclassifed information. We expect the classifcation performance of the camera layouts to improve in the future, since various computer vision algorithms are being actively studied. In addition, our method considers only the relationship between the camera and the characters. Thus, unexpected occlusion or cut-of of background assets by the screen boundary may occur. Consideration of occlusion and staging of assets [6,26] can be an interesting future work. Lastly, we defned the camera layout in the simplest way and assumed a single type of camera movement. Many live-action movies convey a unique style of camera layout that is sometimes hard to defne as a simple type. While our method focuses more on the framing of stylized characters, incorporating an example-based camera control as in Jiang et al. [22] would allow the analysis and reproduction of a greater variety of camera motions.\nAn interesting direction for future work will be to directly analyze a storyboard or a story reel. Hand drawn story reels are often used in animation studios. Therefore, analyzing such a story-reel to extract camera information can be instrumental in the placement of virtual cameras. We envision that layout artists will greatly beneft from such a system because the process can be directly integrated with the current animation pipeline. We believe that our method can further foster new research ideas for interactive and intuitive camera manipulation techniques for stylized characters, an area that has largely been ignored in the community.", "n_publication_ref": 5, "n_figure_ref": 0}, {"heading": "CONCLUSION", "text": "This paper introduces a method to automatically generate a virtual camera layout in a 3D scene using a reference video. To achieve this task, the method classifes the camera layout and estimates visual features of subjects in the reference video. The resulting information is then stored in the form of a shot list, with which we replicate the camera layout of the shots in the 3D scene with consideration of the virtual character's framing type. This enables our approach to be applicable to 3D scenes that contain characters with exaggerated as well as human-like proportions. From user studies, we confrmed that the results of our method are comparable to those of virtual camera layouts composed by an artist. In addition, using our system, both professional artists and novice users required less time to replicate the camera layout of a reference video in a 3D scene than was needed to position the virtual camera from scratch. The artists reported that the automatically generated shot list can be instrumental in creating an initial virtual camera layout. Moreover, the system can be useful for novice users or directors who do not have extensive knowledge of 3D animation software.", "n_publication_ref": 0, "n_figure_ref": 0}, {"heading": "ACKNOWLEDGMENTS", "text": "We thank the anonymous reviewers for their valuable comments; Junghee Kim and his colleagues at MOTIF for the support and helpful discussion about the animation layout; and Haemin Kim, Nicolas Nghiem, and Allen Kim for participating as actors for the reference video. This research is supported by Ministry of Culture, Sports and Tourism and Korea Creative Content Agency (Project Number: R2020040180).", "n_publication_ref": 0, "n_figure_ref": 0}], "references": [{"title": "Grammar of the flm language", "journal": "Silman-James Press", "year": "1991", "authors": " Daniel Arijon"}, {"title": "Capturing Subjective First-Person View Shots with Drones for Automated Cinematography", "journal": "", "year": "2020-08", "authors": "Amirsaman Ashtari; Stefan Stev\u0161i\u0107; Tobias N\u00e4geli; Jean-Charles Bazin; Otmar Hilliges"}, {"title": "Virtual 3D camera composition from frame constraints", "journal": "ACM", "year": "2000", "authors": "William Bares; Scott Mcdermott; Christina Boudreaux; Somying Thainimit"}, {"title": "Estimating cinematographic scene depth in movie shots", "journal": "IEEE", "year": "2010", "authors": "Sergio Benini; Luca Canini; Riccardo Leonardi"}, {"title": "Classifcation of cinematographic shots using lie algebra and its application to complex event recognition", "journal": "IEEE Transactions on Multimedia", "year": "2014", "authors": "Subhabrata Bhattacharya; Ramin Mehran; Rahul Sukthankar; Mubarak Shah"}, {"title": "Real-time Anticipation of Occlusion for Automated Camera Control in Toric Space", "journal": "Wiley Online Library", "year": "2020", "authors": "Ludovic Burg; Christophe Lino; Marc Christie"}, {"title": "Classifying cinematographic shot types", "journal": "", "year": "2013", "authors": "Luca Canini; Sergio Benini; Riccardo Leonardi"}, {"title": "Encoder-Decoder with Atrous Separable Convolution for Semantic Image Segmentation", "journal": "", "year": "2018", "authors": "Yukun Liang-Chieh Chen; George Zhu; Florian Papandreou; Hartwig Schrof;  Adam"}, {"title": "Camera control in computer graphics", "journal": "Wiley Online Library", "year": "2008", "authors": "Marc Christie; Patrick Olivier; Jean-Marie Normand"}, {"title": "Exploiting Semantic Segmentation for Robust Camera Motion Classifcation", "journal": "Springer", "year": "2017", "authors": "Mohamed Fran\u00e7ois-Xavier Derue; Marc Dahmane; Samuel Lalonde;  Foucher"}, {"title": "A lightweight intelligent virtual cinematography system for machinima production", "journal": "", "year": "2007", "authors": "K David; Mark Elson;  Riedl"}, {"title": "Camera-on-rails: automated computation of constrained camera paths", "journal": "ACM", "year": "2015", "authors": "Quentin Galvane; Marc Christie; Chrsitophe Lino; R\u00e9mi Ronfard"}, {"title": "Fabien Servant, Fran\u00b8ois-louis Tariolle, and Philippe Guillotel", "journal": "ACM Transactions on Graphics (TOG)", "year": "2018", "authors": "Quentin Galvane; Christophe Lino; Marc Christie; Julien Fleureau"}, {"title": "Continuity editing for 3D animation", "journal": "", "year": "2015", "authors": "Quentin Galvane; R\u00e9mi Ronfard; Christophe Lino; Marc Christie"}, {"title": "Airways: Optimization-based Planning of Quadrotor Trajectories according to High-Level User Goals", "journal": "ACM", "year": "2016", "authors": "Christoph Gebhardt; Benjamin Hepp; Tobias Naegeli; Stefan Stevsic; Otmar Hilliges"}, {"title": "Optimizing for Aesthetically Pleasing Quadrotor Camera Motion", "journal": "ACM Transactions on Graphics (Proceedings of ACM SIGGRAPH)", "year": "2018", "authors": "Christoph Gebhardt; Stefan Stevsic; Otmar Hilliges"}, {"title": "CAMHID: Camera motion histogram descriptor and its application to cinematographic shot classifcation", "journal": "IEEE Transactions on Circuits and Systems for Video Technology", "year": "2014", "authors": "Min Muhammad Abul Hasan; Xiangjian Xu; Changsheng He;  Xu"}, {"title": "Deep residual learning for image recognition", "journal": "", "year": "2016", "authors": "Kaiming He; Xiangyu Zhang; Shaoqing Ren; Jian Sun"}, {"title": "Act: An autonomous drone cinematography system for action scenes", "journal": "IEEE International Conference on Robotics and Automation (ICRA)", "year": "2018", "authors": "Chong Huang; Fei Gao; Jie Pan; Zhenyu Yang; Weihao Qiu; Peng Chen; Xin Yang; Shaojie Shen; Kwang-Ting Tim Cheng"}, {"title": "Learning to flm from professional human motion videos", "journal": "", "year": "2019", "authors": "Chong Huang; Chuan-En Lin; Zhenyu Yang; Yan Kong; Peng Chen; Xin Yang; Kwang-Ting Cheng"}, {"title": "Learning to Capture a Film-Look Video with a Camera Drone", "journal": "IEEE", "year": "2019", "authors": "Chong Huang; Zhenyu Yang; Yan Kong; Peng Chen; Xin Yang; Kwang-Ting Tim Cheng"}, {"title": "Example-Driven Virtual Cinematography by Learning Camera Behaviors", "journal": "ACM Trans. Graph", "year": "2020-07", "authors": "Hongda Jiang; Bin Wang; Xi Wang; Marc Christie; Baoquan Chen"}, {"title": "Computational video editing for dialogue-driven scenes", "journal": "ACM Trans. Graph", "year": "2017", "authors": "Mackenzie Leake; Abe Davis; Anh Truong; Maneesh Agrawala"}, {"title": "Efcient composition for virtual camera control", "journal": "", "year": "2012", "authors": "Christophe Lino; Marc Christie"}, {"title": "Intuitive and efcient camera control with the toric space", "journal": "ACM Transactions on Graphics (TOG)", "year": "2015", "authors": "Christophe Lino; Marc Christie"}, {"title": "Automated staging for virtual cinematography", "journal": "ACM", "year": "2018", "authors": "Amaury Louarn; Marc Christie; Fabrice Lamarche"}, {"title": "Real-time Planning for Automated Multi-View Drone Cinematography", "journal": "", "year": "2017", "authors": "Tobias N\u00e4geli; Lukas Meier; Alexander Domahidi; Javier Alonso-Mora; Otmar Hilliges"}, {"title": "Improving the efciency of viewpoint composition", "journal": "IEEE Transactions on Visualization and Computer Graphics", "year": "2014", "authors": "Roberto Ranon; Tommaso Urli"}, {"title": "A Unifed Framework for Shot Type Classifcation Based on Subject Centric Lens", "journal": "", "year": "2020", "authors": "Anyi Rao; Jiaze Wang; Linning Xu; Xuekun Jiang; Qingqiu Huang; Bolei Zhou; Dahua Lin"}, {"title": "LCR-Net++: Multi-person 2D and 3D Pose Detection in Natural Images", "journal": "IEEE Transactions on Pattern Analysis and Machine Intelligence", "year": "2019", "authors": "Gr\u00e9gory Rogez; Philippe Weinzaepfel; Cordelia Schmid"}, {"title": "The prose storyboard language: A tool for annotating and directing movies", "journal": "", "year": "2015", "authors": "Remi Ronfard; Vineet Gandhi; Laurent Boiron"}, {"title": "Fine-Grained Head Pose Estimation Without Keypoints", "journal": "", "year": "2018", "authors": "Nataniel Ruiz; Eunji Chong; James M Rehg"}, {"title": "Shot Scale Analysis in Movies by Convolutional Neural Networks", "journal": "IEEE", "year": "2018", "authors": "Mattia Savardi; Alberto Signoroni; Pierangelo Migliorati; Sergio Benini"}, {"title": "Evaluation campaigns and TRECVid", "journal": "ACM", "year": "2006", "authors": "Alan F Smeaton; Paul Over; Wessel Kraaij"}, {"title": "Thinking Like a Director: Film Editing Patterns for Virtual Cinematographic Storytelling", "journal": "ACM Transactions on Multimedia Computing", "year": "2018", "authors": "Hui-Yin Wu; Francesca Pal\u00f9; Roberto Ranon; Marc Christie"}, {"title": "A robust and efcient shot boundary detection approach based on fsher criterion", "journal": "ACM", "year": "2012", "authors": "Chi Zhang; Weiqiang Wang"}], "figures": [{"figure_label": "2", "figure_type": "", "figure_id": "fig_1", "figure_caption": "Figure 2 :2Figure 2: Camera layout components: (a) six diferent framing types, and (b) 13 diferent camera movements.", "figure_data": ""}, {"figure_label": "4", "figure_type": "", "figure_id": "fig_2", "figure_caption": "Figure 4 :4Figure 4: The on-screen visibility of body parts can difer depending on the character's unique body proportions, even if the on-screen position and the on-screen ratio of the head are identical. A Character on the right column \u00a9KYOWON.", "figure_data": ""}, {"figure_label": "", "figure_type": "", "figure_id": "fig_3", "figure_caption": "(a) Static shots (b) A shot with the camera panning left", "figure_data": ""}, {"figure_label": "6", "figure_type": "", "figure_id": "fig_4", "figure_caption": "Figure 6 :6Figure6: Results from our method for shots from Back to the Future using 3D scenes from Galvane et al.[12]. Here, (a) shows the frst frames of the shots from the reference video, and (b) shows the panning movement following Goldie. The frames in the frst rows of (a) and (b) are from Back to the Future (R. Zemeckis, 1985) \u00a9Universal Pictures.", "figure_data": ""}, {"figure_label": "", "figure_type": "", "figure_id": "fig_5", "figure_caption": "Our method with human characters (c) Our method with stylized characters (d) Toric space method with stylized characters", "figure_data": ""}, {"figure_label": "7", "figure_type": "", "figure_id": "fig_6", "figure_caption": "Figure 7 :7Figure7: Generated virtual camera layouts from the Counseling dataset. Here, (a) shows reference shots, (b) and (c) show generated camera layouts using our method with similar as well as diferent body proportions to/from those of humans, and (d) shows results from the Toric space method. Characters and background assets, respectively, in (c) and (d): \u00a9Mix and Jam, \u00a9Jeremy Vikery and Alex Mateo.", "figure_data": ""}, {"figure_label": "8", "figure_type": "", "figure_id": "fig_7", "figure_caption": "Figure 8 :8Figure8: Comparison with the artist's layout[14] of two shots from Back to the Future. The reference frames are from Back to the Future (R.Zemeckis, 1985)  \u00a9Universal Pictures.", "figure_data": ""}, {"figure_label": "9", "figure_type": "", "figure_id": "fig_8", "figure_caption": "Figure 9 :9Figure 9: Ablation study for optimization terms. E V , E H , and E M are the visibility, the headroom, and the horizontal arrangement term, respectively. Yellow hoodie character by \u00a9Mario Nagamura.", "figure_data": ""}, {"figure_label": "", "figure_type": "", "figure_id": "fig_9", "figure_caption": "(a) Four diferent pairs of target characters used in user study. (b) Virtual camera layouts produced by diferent methods.", "figure_data": ""}, {"figure_label": "10", "figure_type": "", "figure_id": "fig_10", "figure_caption": "Figure 10 :10Figure 10: Using virtual character pairs from (a), we compare virtual camera layout created by artist, our method, and the Toric space method refecting the reference shot (b). Both reference subjects are in MS. Characters in Pair A and the left character in Pair C: \u00a9Karim Kashef, \u00a9AnimSchool, \u00a9Mario Nagamura. Character pairs in Pair B and Pair D: \u00a9Mix and Jam, \u00a9KYOWON", "figure_data": ""}, {"figure_label": "11", "figure_type": "", "figure_id": "fig_11", "figure_caption": "Figure 11 :11Figure 11: Average rating scores for layouts generated by each method.", "figure_data": ""}, {"figure_label": "12", "figure_type": "", "figure_id": "fig_12", "figure_caption": "Figure 12 :12Figure 12: Average rating scores for layouts generated for each character pair.", "figure_data": ""}, {"figure_label": "1", "figure_type": "table", "figure_id": "tab_0", "figure_caption": "Correspondence for framing. Each framing type is determined based on the corresponding keypoints. The camera framing in a virtual scene is generated using the corresponding skeletal parts.", "figure_data": "Framing Keypoints Skeletal PartsCUEyeHeadMCU MSShoulder HipSpineMLSKneeLegFS LSAnkleToe4.1.2 Camera Movement."}, {"figure_label": "3", "figure_type": "table", "figure_id": "tab_2", "figure_caption": "User preference results for layouts generated by three diferent methods: Artist, our method, and the Toric space method. Each cell of table shows % of row preferred over column.", "figure_data": "row > column Artist Ours ToricArtist-53%74%Ours47%-74%Toric26%26%-"}], "doi": "10.1145/3411764.3445437"}